
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model awarding
 * 
 */
export type awarding = $Result.DefaultSelection<Prisma.$awardingPayload>
/**
 * Model ci_sessions
 * 
 */
export type ci_sessions = $Result.DefaultSelection<Prisma.$ci_sessionsPayload>
/**
 * Model finalis2022
 * 
 */
export type finalis2022 = $Result.DefaultSelection<Prisma.$finalis2022Payload>
/**
 * Model metanoia
 * 
 */
export type metanoia = $Result.DefaultSelection<Prisma.$metanoiaPayload>
/**
 * Model peserta
 * 
 */
export type peserta = $Result.DefaultSelection<Prisma.$pesertaPayload>
/**
 * Model peserta_2023
 * 
 */
export type peserta_2023 = $Result.DefaultSelection<Prisma.$peserta_2023Payload>
/**
 * Model voting
 * 
 */
export type voting = $Result.DefaultSelection<Prisma.$votingPayload>
/**
 * Model sponsor_medpar
 * 
 */
export type sponsor_medpar = $Result.DefaultSelection<Prisma.$sponsor_medparPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.awarding`: Exposes CRUD operations for the **awarding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Awardings
    * const awardings = await prisma.awarding.findMany()
    * ```
    */
  get awarding(): Prisma.awardingDelegate<ExtArgs>;

  /**
   * `prisma.ci_sessions`: Exposes CRUD operations for the **ci_sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ci_sessions
    * const ci_sessions = await prisma.ci_sessions.findMany()
    * ```
    */
  get ci_sessions(): Prisma.ci_sessionsDelegate<ExtArgs>;

  /**
   * `prisma.finalis2022`: Exposes CRUD operations for the **finalis2022** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Finalis2022s
    * const finalis2022s = await prisma.finalis2022.findMany()
    * ```
    */
  get finalis2022(): Prisma.finalis2022Delegate<ExtArgs>;

  /**
   * `prisma.metanoia`: Exposes CRUD operations for the **metanoia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Metanoias
    * const metanoias = await prisma.metanoia.findMany()
    * ```
    */
  get metanoia(): Prisma.metanoiaDelegate<ExtArgs>;

  /**
   * `prisma.peserta`: Exposes CRUD operations for the **peserta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pesertas
    * const pesertas = await prisma.peserta.findMany()
    * ```
    */
  get peserta(): Prisma.pesertaDelegate<ExtArgs>;

  /**
   * `prisma.peserta_2023`: Exposes CRUD operations for the **peserta_2023** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Peserta_2023s
    * const peserta_2023s = await prisma.peserta_2023.findMany()
    * ```
    */
  get peserta_2023(): Prisma.peserta_2023Delegate<ExtArgs>;

  /**
   * `prisma.voting`: Exposes CRUD operations for the **voting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votings
    * const votings = await prisma.voting.findMany()
    * ```
    */
  get voting(): Prisma.votingDelegate<ExtArgs>;

  /**
   * `prisma.sponsor_medpar`: Exposes CRUD operations for the **sponsor_medpar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sponsor_medpars
    * const sponsor_medpars = await prisma.sponsor_medpar.findMany()
    * ```
    */
  get sponsor_medpar(): Prisma.sponsor_medparDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.1
   * Query Engine version: 6a3747c37ff169c90047725a05a6ef02e32ac97e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    awarding: 'awarding',
    ci_sessions: 'ci_sessions',
    finalis2022: 'finalis2022',
    metanoia: 'metanoia',
    peserta: 'peserta',
    peserta_2023: 'peserta_2023',
    voting: 'voting',
    sponsor_medpar: 'sponsor_medpar'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'awarding' | 'ci_sessions' | 'finalis2022' | 'metanoia' | 'peserta' | 'peserta_2023' | 'voting' | 'sponsor_medpar'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      awarding: {
        payload: Prisma.$awardingPayload<ExtArgs>
        fields: Prisma.awardingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.awardingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.awardingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload>
          }
          findFirst: {
            args: Prisma.awardingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.awardingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload>
          }
          findMany: {
            args: Prisma.awardingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload>[]
          }
          create: {
            args: Prisma.awardingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload>
          }
          createMany: {
            args: Prisma.awardingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.awardingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload>
          }
          update: {
            args: Prisma.awardingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload>
          }
          deleteMany: {
            args: Prisma.awardingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.awardingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.awardingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$awardingPayload>
          }
          aggregate: {
            args: Prisma.AwardingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAwarding>
          }
          groupBy: {
            args: Prisma.awardingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AwardingGroupByOutputType>[]
          }
          count: {
            args: Prisma.awardingCountArgs<ExtArgs>,
            result: $Utils.Optional<AwardingCountAggregateOutputType> | number
          }
        }
      }
      ci_sessions: {
        payload: Prisma.$ci_sessionsPayload<ExtArgs>
        fields: Prisma.ci_sessionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ci_sessionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ci_sessionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload>
          }
          findFirst: {
            args: Prisma.ci_sessionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ci_sessionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload>
          }
          findMany: {
            args: Prisma.ci_sessionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload>[]
          }
          create: {
            args: Prisma.ci_sessionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload>
          }
          createMany: {
            args: Prisma.ci_sessionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ci_sessionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload>
          }
          update: {
            args: Prisma.ci_sessionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload>
          }
          deleteMany: {
            args: Prisma.ci_sessionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ci_sessionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ci_sessionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ci_sessionsPayload>
          }
          aggregate: {
            args: Prisma.Ci_sessionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCi_sessions>
          }
          groupBy: {
            args: Prisma.ci_sessionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Ci_sessionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ci_sessionsCountArgs<ExtArgs>,
            result: $Utils.Optional<Ci_sessionsCountAggregateOutputType> | number
          }
        }
      }
      finalis2022: {
        payload: Prisma.$finalis2022Payload<ExtArgs>
        fields: Prisma.finalis2022FieldRefs
        operations: {
          findUnique: {
            args: Prisma.finalis2022FindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.finalis2022FindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload>
          }
          findFirst: {
            args: Prisma.finalis2022FindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.finalis2022FindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload>
          }
          findMany: {
            args: Prisma.finalis2022FindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload>[]
          }
          create: {
            args: Prisma.finalis2022CreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload>
          }
          createMany: {
            args: Prisma.finalis2022CreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.finalis2022DeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload>
          }
          update: {
            args: Prisma.finalis2022UpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload>
          }
          deleteMany: {
            args: Prisma.finalis2022DeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.finalis2022UpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.finalis2022UpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$finalis2022Payload>
          }
          aggregate: {
            args: Prisma.Finalis2022AggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFinalis2022>
          }
          groupBy: {
            args: Prisma.finalis2022GroupByArgs<ExtArgs>,
            result: $Utils.Optional<Finalis2022GroupByOutputType>[]
          }
          count: {
            args: Prisma.finalis2022CountArgs<ExtArgs>,
            result: $Utils.Optional<Finalis2022CountAggregateOutputType> | number
          }
        }
      }
      metanoia: {
        payload: Prisma.$metanoiaPayload<ExtArgs>
        fields: Prisma.metanoiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.metanoiaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.metanoiaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload>
          }
          findFirst: {
            args: Prisma.metanoiaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.metanoiaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload>
          }
          findMany: {
            args: Prisma.metanoiaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload>[]
          }
          create: {
            args: Prisma.metanoiaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload>
          }
          createMany: {
            args: Prisma.metanoiaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.metanoiaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload>
          }
          update: {
            args: Prisma.metanoiaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload>
          }
          deleteMany: {
            args: Prisma.metanoiaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.metanoiaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.metanoiaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metanoiaPayload>
          }
          aggregate: {
            args: Prisma.MetanoiaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMetanoia>
          }
          groupBy: {
            args: Prisma.metanoiaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MetanoiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.metanoiaCountArgs<ExtArgs>,
            result: $Utils.Optional<MetanoiaCountAggregateOutputType> | number
          }
        }
      }
      peserta: {
        payload: Prisma.$pesertaPayload<ExtArgs>
        fields: Prisma.pesertaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pesertaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pesertaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload>
          }
          findFirst: {
            args: Prisma.pesertaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pesertaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload>
          }
          findMany: {
            args: Prisma.pesertaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload>[]
          }
          create: {
            args: Prisma.pesertaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload>
          }
          createMany: {
            args: Prisma.pesertaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.pesertaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload>
          }
          update: {
            args: Prisma.pesertaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload>
          }
          deleteMany: {
            args: Prisma.pesertaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.pesertaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.pesertaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pesertaPayload>
          }
          aggregate: {
            args: Prisma.PesertaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePeserta>
          }
          groupBy: {
            args: Prisma.pesertaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PesertaGroupByOutputType>[]
          }
          count: {
            args: Prisma.pesertaCountArgs<ExtArgs>,
            result: $Utils.Optional<PesertaCountAggregateOutputType> | number
          }
        }
      }
      peserta_2023: {
        payload: Prisma.$peserta_2023Payload<ExtArgs>
        fields: Prisma.peserta_2023FieldRefs
        operations: {
          findUnique: {
            args: Prisma.peserta_2023FindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.peserta_2023FindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload>
          }
          findFirst: {
            args: Prisma.peserta_2023FindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.peserta_2023FindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload>
          }
          findMany: {
            args: Prisma.peserta_2023FindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload>[]
          }
          create: {
            args: Prisma.peserta_2023CreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload>
          }
          createMany: {
            args: Prisma.peserta_2023CreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.peserta_2023DeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload>
          }
          update: {
            args: Prisma.peserta_2023UpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload>
          }
          deleteMany: {
            args: Prisma.peserta_2023DeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.peserta_2023UpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.peserta_2023UpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$peserta_2023Payload>
          }
          aggregate: {
            args: Prisma.Peserta_2023AggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePeserta_2023>
          }
          groupBy: {
            args: Prisma.peserta_2023GroupByArgs<ExtArgs>,
            result: $Utils.Optional<Peserta_2023GroupByOutputType>[]
          }
          count: {
            args: Prisma.peserta_2023CountArgs<ExtArgs>,
            result: $Utils.Optional<Peserta_2023CountAggregateOutputType> | number
          }
        }
      }
      voting: {
        payload: Prisma.$votingPayload<ExtArgs>
        fields: Prisma.votingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.votingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.votingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload>
          }
          findFirst: {
            args: Prisma.votingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.votingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload>
          }
          findMany: {
            args: Prisma.votingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload>[]
          }
          create: {
            args: Prisma.votingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload>
          }
          createMany: {
            args: Prisma.votingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.votingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload>
          }
          update: {
            args: Prisma.votingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload>
          }
          deleteMany: {
            args: Prisma.votingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.votingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.votingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$votingPayload>
          }
          aggregate: {
            args: Prisma.VotingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVoting>
          }
          groupBy: {
            args: Prisma.votingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VotingGroupByOutputType>[]
          }
          count: {
            args: Prisma.votingCountArgs<ExtArgs>,
            result: $Utils.Optional<VotingCountAggregateOutputType> | number
          }
        }
      }
      sponsor_medpar: {
        payload: Prisma.$sponsor_medparPayload<ExtArgs>
        fields: Prisma.sponsor_medparFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sponsor_medparFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sponsor_medparFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload>
          }
          findFirst: {
            args: Prisma.sponsor_medparFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sponsor_medparFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload>
          }
          findMany: {
            args: Prisma.sponsor_medparFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload>[]
          }
          create: {
            args: Prisma.sponsor_medparCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload>
          }
          createMany: {
            args: Prisma.sponsor_medparCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sponsor_medparDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload>
          }
          update: {
            args: Prisma.sponsor_medparUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload>
          }
          deleteMany: {
            args: Prisma.sponsor_medparDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sponsor_medparUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sponsor_medparUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sponsor_medparPayload>
          }
          aggregate: {
            args: Prisma.Sponsor_medparAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSponsor_medpar>
          }
          groupBy: {
            args: Prisma.sponsor_medparGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Sponsor_medparGroupByOutputType>[]
          }
          count: {
            args: Prisma.sponsor_medparCountArgs<ExtArgs>,
            result: $Utils.Optional<Sponsor_medparCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string | null
    email: string | null
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }


  export type $userPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      username: string | null
      email: string | null
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly username: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
  }



  /**
   * Model awarding
   */

  export type AggregateAwarding = {
    _count: AwardingCountAggregateOutputType | null
    _min: AwardingMinAggregateOutputType | null
    _max: AwardingMaxAggregateOutputType | null
  }

  export type AwardingMinAggregateOutputType = {
    Name: string | null
    Email: string | null
    PhoneNumber: string | null
    TransactionProof: string | null
    Origin: string | null
    TransactionDate: string | null
  }

  export type AwardingMaxAggregateOutputType = {
    Name: string | null
    Email: string | null
    PhoneNumber: string | null
    TransactionProof: string | null
    Origin: string | null
    TransactionDate: string | null
  }

  export type AwardingCountAggregateOutputType = {
    Name: number
    Email: number
    PhoneNumber: number
    TransactionProof: number
    Origin: number
    TransactionDate: number
    _all: number
  }


  export type AwardingMinAggregateInputType = {
    Name?: true
    Email?: true
    PhoneNumber?: true
    TransactionProof?: true
    Origin?: true
    TransactionDate?: true
  }

  export type AwardingMaxAggregateInputType = {
    Name?: true
    Email?: true
    PhoneNumber?: true
    TransactionProof?: true
    Origin?: true
    TransactionDate?: true
  }

  export type AwardingCountAggregateInputType = {
    Name?: true
    Email?: true
    PhoneNumber?: true
    TransactionProof?: true
    Origin?: true
    TransactionDate?: true
    _all?: true
  }

  export type AwardingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which awarding to aggregate.
     */
    where?: awardingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of awardings to fetch.
     */
    orderBy?: awardingOrderByWithRelationInput | awardingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: awardingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` awardings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` awardings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned awardings
    **/
    _count?: true | AwardingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AwardingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AwardingMaxAggregateInputType
  }

  export type GetAwardingAggregateType<T extends AwardingAggregateArgs> = {
        [P in keyof T & keyof AggregateAwarding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAwarding[P]>
      : GetScalarType<T[P], AggregateAwarding[P]>
  }




  export type awardingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: awardingWhereInput
    orderBy?: awardingOrderByWithAggregationInput | awardingOrderByWithAggregationInput[]
    by: AwardingScalarFieldEnum[] | AwardingScalarFieldEnum
    having?: awardingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AwardingCountAggregateInputType | true
    _min?: AwardingMinAggregateInputType
    _max?: AwardingMaxAggregateInputType
  }

  export type AwardingGroupByOutputType = {
    Name: string
    Email: string
    PhoneNumber: string
    TransactionProof: string
    Origin: string
    TransactionDate: string
    _count: AwardingCountAggregateOutputType | null
    _min: AwardingMinAggregateOutputType | null
    _max: AwardingMaxAggregateOutputType | null
  }

  type GetAwardingGroupByPayload<T extends awardingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AwardingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AwardingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AwardingGroupByOutputType[P]>
            : GetScalarType<T[P], AwardingGroupByOutputType[P]>
        }
      >
    >


  export type awardingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Name?: boolean
    Email?: boolean
    PhoneNumber?: boolean
    TransactionProof?: boolean
    Origin?: boolean
    TransactionDate?: boolean
  }, ExtArgs["result"]["awarding"]>

  export type awardingSelectScalar = {
    Name?: boolean
    Email?: boolean
    PhoneNumber?: boolean
    TransactionProof?: boolean
    Origin?: boolean
    TransactionDate?: boolean
  }


  export type $awardingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "awarding"
    objects: {}
    scalars: $Extensions.GetResult<{
      Name: string
      Email: string
      PhoneNumber: string
      TransactionProof: string
      Origin: string
      TransactionDate: string
    }, ExtArgs["result"]["awarding"]>
    composites: {}
  }


  type awardingGetPayload<S extends boolean | null | undefined | awardingDefaultArgs> = $Result.GetResult<Prisma.$awardingPayload, S>

  type awardingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<awardingFindManyArgs, 'select' | 'include'> & {
      select?: AwardingCountAggregateInputType | true
    }

  export interface awardingDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['awarding'], meta: { name: 'awarding' } }
    /**
     * Find zero or one Awarding that matches the filter.
     * @param {awardingFindUniqueArgs} args - Arguments to find a Awarding
     * @example
     * // Get one Awarding
     * const awarding = await prisma.awarding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends awardingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, awardingFindUniqueArgs<ExtArgs>>
    ): Prisma__awardingClient<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Awarding that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {awardingFindUniqueOrThrowArgs} args - Arguments to find a Awarding
     * @example
     * // Get one Awarding
     * const awarding = await prisma.awarding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends awardingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, awardingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__awardingClient<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Awarding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {awardingFindFirstArgs} args - Arguments to find a Awarding
     * @example
     * // Get one Awarding
     * const awarding = await prisma.awarding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends awardingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, awardingFindFirstArgs<ExtArgs>>
    ): Prisma__awardingClient<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Awarding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {awardingFindFirstOrThrowArgs} args - Arguments to find a Awarding
     * @example
     * // Get one Awarding
     * const awarding = await prisma.awarding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends awardingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, awardingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__awardingClient<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Awardings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {awardingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Awardings
     * const awardings = await prisma.awarding.findMany()
     * 
     * // Get first 10 Awardings
     * const awardings = await prisma.awarding.findMany({ take: 10 })
     * 
     * // Only select the `Name`
     * const awardingWithNameOnly = await prisma.awarding.findMany({ select: { Name: true } })
     * 
    **/
    findMany<T extends awardingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, awardingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Awarding.
     * @param {awardingCreateArgs} args - Arguments to create a Awarding.
     * @example
     * // Create one Awarding
     * const Awarding = await prisma.awarding.create({
     *   data: {
     *     // ... data to create a Awarding
     *   }
     * })
     * 
    **/
    create<T extends awardingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, awardingCreateArgs<ExtArgs>>
    ): Prisma__awardingClient<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Awardings.
     *     @param {awardingCreateManyArgs} args - Arguments to create many Awardings.
     *     @example
     *     // Create many Awardings
     *     const awarding = await prisma.awarding.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends awardingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, awardingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Awarding.
     * @param {awardingDeleteArgs} args - Arguments to delete one Awarding.
     * @example
     * // Delete one Awarding
     * const Awarding = await prisma.awarding.delete({
     *   where: {
     *     // ... filter to delete one Awarding
     *   }
     * })
     * 
    **/
    delete<T extends awardingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, awardingDeleteArgs<ExtArgs>>
    ): Prisma__awardingClient<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Awarding.
     * @param {awardingUpdateArgs} args - Arguments to update one Awarding.
     * @example
     * // Update one Awarding
     * const awarding = await prisma.awarding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends awardingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, awardingUpdateArgs<ExtArgs>>
    ): Prisma__awardingClient<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Awardings.
     * @param {awardingDeleteManyArgs} args - Arguments to filter Awardings to delete.
     * @example
     * // Delete a few Awardings
     * const { count } = await prisma.awarding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends awardingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, awardingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Awardings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {awardingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Awardings
     * const awarding = await prisma.awarding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends awardingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, awardingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Awarding.
     * @param {awardingUpsertArgs} args - Arguments to update or create a Awarding.
     * @example
     * // Update or create a Awarding
     * const awarding = await prisma.awarding.upsert({
     *   create: {
     *     // ... data to create a Awarding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Awarding we want to update
     *   }
     * })
    **/
    upsert<T extends awardingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, awardingUpsertArgs<ExtArgs>>
    ): Prisma__awardingClient<$Result.GetResult<Prisma.$awardingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Awardings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {awardingCountArgs} args - Arguments to filter Awardings to count.
     * @example
     * // Count the number of Awardings
     * const count = await prisma.awarding.count({
     *   where: {
     *     // ... the filter for the Awardings we want to count
     *   }
     * })
    **/
    count<T extends awardingCountArgs>(
      args?: Subset<T, awardingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AwardingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Awarding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AwardingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AwardingAggregateArgs>(args: Subset<T, AwardingAggregateArgs>): Prisma.PrismaPromise<GetAwardingAggregateType<T>>

    /**
     * Group by Awarding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {awardingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends awardingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: awardingGroupByArgs['orderBy'] }
        : { orderBy?: awardingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, awardingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAwardingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the awarding model
   */
  readonly fields: awardingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for awarding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__awardingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the awarding model
   */ 
  interface awardingFieldRefs {
    readonly Name: FieldRef<"awarding", 'String'>
    readonly Email: FieldRef<"awarding", 'String'>
    readonly PhoneNumber: FieldRef<"awarding", 'String'>
    readonly TransactionProof: FieldRef<"awarding", 'String'>
    readonly Origin: FieldRef<"awarding", 'String'>
    readonly TransactionDate: FieldRef<"awarding", 'String'>
  }
    

  // Custom InputTypes

  /**
   * awarding findUnique
   */
  export type awardingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * Filter, which awarding to fetch.
     */
    where: awardingWhereUniqueInput
  }


  /**
   * awarding findUniqueOrThrow
   */
  export type awardingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * Filter, which awarding to fetch.
     */
    where: awardingWhereUniqueInput
  }


  /**
   * awarding findFirst
   */
  export type awardingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * Filter, which awarding to fetch.
     */
    where?: awardingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of awardings to fetch.
     */
    orderBy?: awardingOrderByWithRelationInput | awardingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for awardings.
     */
    cursor?: awardingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` awardings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` awardings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of awardings.
     */
    distinct?: AwardingScalarFieldEnum | AwardingScalarFieldEnum[]
  }


  /**
   * awarding findFirstOrThrow
   */
  export type awardingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * Filter, which awarding to fetch.
     */
    where?: awardingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of awardings to fetch.
     */
    orderBy?: awardingOrderByWithRelationInput | awardingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for awardings.
     */
    cursor?: awardingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` awardings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` awardings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of awardings.
     */
    distinct?: AwardingScalarFieldEnum | AwardingScalarFieldEnum[]
  }


  /**
   * awarding findMany
   */
  export type awardingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * Filter, which awardings to fetch.
     */
    where?: awardingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of awardings to fetch.
     */
    orderBy?: awardingOrderByWithRelationInput | awardingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing awardings.
     */
    cursor?: awardingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` awardings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` awardings.
     */
    skip?: number
    distinct?: AwardingScalarFieldEnum | AwardingScalarFieldEnum[]
  }


  /**
   * awarding create
   */
  export type awardingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * The data needed to create a awarding.
     */
    data: XOR<awardingCreateInput, awardingUncheckedCreateInput>
  }


  /**
   * awarding createMany
   */
  export type awardingCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many awardings.
     */
    data: awardingCreateManyInput | awardingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * awarding update
   */
  export type awardingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * The data needed to update a awarding.
     */
    data: XOR<awardingUpdateInput, awardingUncheckedUpdateInput>
    /**
     * Choose, which awarding to update.
     */
    where: awardingWhereUniqueInput
  }


  /**
   * awarding updateMany
   */
  export type awardingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update awardings.
     */
    data: XOR<awardingUpdateManyMutationInput, awardingUncheckedUpdateManyInput>
    /**
     * Filter which awardings to update
     */
    where?: awardingWhereInput
  }


  /**
   * awarding upsert
   */
  export type awardingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * The filter to search for the awarding to update in case it exists.
     */
    where: awardingWhereUniqueInput
    /**
     * In case the awarding found by the `where` argument doesn't exist, create a new awarding with this data.
     */
    create: XOR<awardingCreateInput, awardingUncheckedCreateInput>
    /**
     * In case the awarding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<awardingUpdateInput, awardingUncheckedUpdateInput>
  }


  /**
   * awarding delete
   */
  export type awardingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
    /**
     * Filter which awarding to delete.
     */
    where: awardingWhereUniqueInput
  }


  /**
   * awarding deleteMany
   */
  export type awardingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which awardings to delete
     */
    where?: awardingWhereInput
  }


  /**
   * awarding without action
   */
  export type awardingDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the awarding
     */
    select?: awardingSelect<ExtArgs> | null
  }



  /**
   * Model ci_sessions
   */

  export type AggregateCi_sessions = {
    _count: Ci_sessionsCountAggregateOutputType | null
    _avg: Ci_sessionsAvgAggregateOutputType | null
    _sum: Ci_sessionsSumAggregateOutputType | null
    _min: Ci_sessionsMinAggregateOutputType | null
    _max: Ci_sessionsMaxAggregateOutputType | null
  }

  export type Ci_sessionsAvgAggregateOutputType = {
    timestamp: number | null
  }

  export type Ci_sessionsSumAggregateOutputType = {
    timestamp: number | null
  }

  export type Ci_sessionsMinAggregateOutputType = {
    id: string | null
    ip_address: string | null
    timestamp: number | null
    data: Buffer | null
  }

  export type Ci_sessionsMaxAggregateOutputType = {
    id: string | null
    ip_address: string | null
    timestamp: number | null
    data: Buffer | null
  }

  export type Ci_sessionsCountAggregateOutputType = {
    id: number
    ip_address: number
    timestamp: number
    data: number
    _all: number
  }


  export type Ci_sessionsAvgAggregateInputType = {
    timestamp?: true
  }

  export type Ci_sessionsSumAggregateInputType = {
    timestamp?: true
  }

  export type Ci_sessionsMinAggregateInputType = {
    id?: true
    ip_address?: true
    timestamp?: true
    data?: true
  }

  export type Ci_sessionsMaxAggregateInputType = {
    id?: true
    ip_address?: true
    timestamp?: true
    data?: true
  }

  export type Ci_sessionsCountAggregateInputType = {
    id?: true
    ip_address?: true
    timestamp?: true
    data?: true
    _all?: true
  }

  export type Ci_sessionsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ci_sessions to aggregate.
     */
    where?: ci_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ci_sessions to fetch.
     */
    orderBy?: ci_sessionsOrderByWithRelationInput | ci_sessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ci_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ci_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ci_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ci_sessions
    **/
    _count?: true | Ci_sessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ci_sessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ci_sessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ci_sessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ci_sessionsMaxAggregateInputType
  }

  export type GetCi_sessionsAggregateType<T extends Ci_sessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateCi_sessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCi_sessions[P]>
      : GetScalarType<T[P], AggregateCi_sessions[P]>
  }




  export type ci_sessionsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ci_sessionsWhereInput
    orderBy?: ci_sessionsOrderByWithAggregationInput | ci_sessionsOrderByWithAggregationInput[]
    by: Ci_sessionsScalarFieldEnum[] | Ci_sessionsScalarFieldEnum
    having?: ci_sessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ci_sessionsCountAggregateInputType | true
    _avg?: Ci_sessionsAvgAggregateInputType
    _sum?: Ci_sessionsSumAggregateInputType
    _min?: Ci_sessionsMinAggregateInputType
    _max?: Ci_sessionsMaxAggregateInputType
  }

  export type Ci_sessionsGroupByOutputType = {
    id: string
    ip_address: string
    timestamp: number
    data: Buffer
    _count: Ci_sessionsCountAggregateOutputType | null
    _avg: Ci_sessionsAvgAggregateOutputType | null
    _sum: Ci_sessionsSumAggregateOutputType | null
    _min: Ci_sessionsMinAggregateOutputType | null
    _max: Ci_sessionsMaxAggregateOutputType | null
  }

  type GetCi_sessionsGroupByPayload<T extends ci_sessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ci_sessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ci_sessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ci_sessionsGroupByOutputType[P]>
            : GetScalarType<T[P], Ci_sessionsGroupByOutputType[P]>
        }
      >
    >


  export type ci_sessionsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip_address?: boolean
    timestamp?: boolean
    data?: boolean
  }, ExtArgs["result"]["ci_sessions"]>

  export type ci_sessionsSelectScalar = {
    id?: boolean
    ip_address?: boolean
    timestamp?: boolean
    data?: boolean
  }


  export type $ci_sessionsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ci_sessions"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      ip_address: string
      timestamp: number
      data: Buffer
    }, ExtArgs["result"]["ci_sessions"]>
    composites: {}
  }


  type ci_sessionsGetPayload<S extends boolean | null | undefined | ci_sessionsDefaultArgs> = $Result.GetResult<Prisma.$ci_sessionsPayload, S>

  type ci_sessionsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ci_sessionsFindManyArgs, 'select' | 'include'> & {
      select?: Ci_sessionsCountAggregateInputType | true
    }

  export interface ci_sessionsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ci_sessions'], meta: { name: 'ci_sessions' } }
    /**
     * Find zero or one Ci_sessions that matches the filter.
     * @param {ci_sessionsFindUniqueArgs} args - Arguments to find a Ci_sessions
     * @example
     * // Get one Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ci_sessionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ci_sessionsFindUniqueArgs<ExtArgs>>
    ): Prisma__ci_sessionsClient<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ci_sessions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ci_sessionsFindUniqueOrThrowArgs} args - Arguments to find a Ci_sessions
     * @example
     * // Get one Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ci_sessionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ci_sessionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ci_sessionsClient<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ci_sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ci_sessionsFindFirstArgs} args - Arguments to find a Ci_sessions
     * @example
     * // Get one Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ci_sessionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ci_sessionsFindFirstArgs<ExtArgs>>
    ): Prisma__ci_sessionsClient<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ci_sessions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ci_sessionsFindFirstOrThrowArgs} args - Arguments to find a Ci_sessions
     * @example
     * // Get one Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ci_sessionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ci_sessionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ci_sessionsClient<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ci_sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ci_sessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.findMany()
     * 
     * // Get first 10 Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ci_sessionsWithIdOnly = await prisma.ci_sessions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ci_sessionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ci_sessionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ci_sessions.
     * @param {ci_sessionsCreateArgs} args - Arguments to create a Ci_sessions.
     * @example
     * // Create one Ci_sessions
     * const Ci_sessions = await prisma.ci_sessions.create({
     *   data: {
     *     // ... data to create a Ci_sessions
     *   }
     * })
     * 
    **/
    create<T extends ci_sessionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ci_sessionsCreateArgs<ExtArgs>>
    ): Prisma__ci_sessionsClient<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ci_sessions.
     *     @param {ci_sessionsCreateManyArgs} args - Arguments to create many Ci_sessions.
     *     @example
     *     // Create many Ci_sessions
     *     const ci_sessions = await prisma.ci_sessions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ci_sessionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ci_sessionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ci_sessions.
     * @param {ci_sessionsDeleteArgs} args - Arguments to delete one Ci_sessions.
     * @example
     * // Delete one Ci_sessions
     * const Ci_sessions = await prisma.ci_sessions.delete({
     *   where: {
     *     // ... filter to delete one Ci_sessions
     *   }
     * })
     * 
    **/
    delete<T extends ci_sessionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ci_sessionsDeleteArgs<ExtArgs>>
    ): Prisma__ci_sessionsClient<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ci_sessions.
     * @param {ci_sessionsUpdateArgs} args - Arguments to update one Ci_sessions.
     * @example
     * // Update one Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ci_sessionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ci_sessionsUpdateArgs<ExtArgs>>
    ): Prisma__ci_sessionsClient<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ci_sessions.
     * @param {ci_sessionsDeleteManyArgs} args - Arguments to filter Ci_sessions to delete.
     * @example
     * // Delete a few Ci_sessions
     * const { count } = await prisma.ci_sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ci_sessionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ci_sessionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ci_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ci_sessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ci_sessionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ci_sessionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ci_sessions.
     * @param {ci_sessionsUpsertArgs} args - Arguments to update or create a Ci_sessions.
     * @example
     * // Update or create a Ci_sessions
     * const ci_sessions = await prisma.ci_sessions.upsert({
     *   create: {
     *     // ... data to create a Ci_sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ci_sessions we want to update
     *   }
     * })
    **/
    upsert<T extends ci_sessionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ci_sessionsUpsertArgs<ExtArgs>>
    ): Prisma__ci_sessionsClient<$Result.GetResult<Prisma.$ci_sessionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ci_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ci_sessionsCountArgs} args - Arguments to filter Ci_sessions to count.
     * @example
     * // Count the number of Ci_sessions
     * const count = await prisma.ci_sessions.count({
     *   where: {
     *     // ... the filter for the Ci_sessions we want to count
     *   }
     * })
    **/
    count<T extends ci_sessionsCountArgs>(
      args?: Subset<T, ci_sessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ci_sessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ci_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ci_sessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ci_sessionsAggregateArgs>(args: Subset<T, Ci_sessionsAggregateArgs>): Prisma.PrismaPromise<GetCi_sessionsAggregateType<T>>

    /**
     * Group by Ci_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ci_sessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ci_sessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ci_sessionsGroupByArgs['orderBy'] }
        : { orderBy?: ci_sessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ci_sessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCi_sessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ci_sessions model
   */
  readonly fields: ci_sessionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ci_sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ci_sessionsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ci_sessions model
   */ 
  interface ci_sessionsFieldRefs {
    readonly id: FieldRef<"ci_sessions", 'String'>
    readonly ip_address: FieldRef<"ci_sessions", 'String'>
    readonly timestamp: FieldRef<"ci_sessions", 'Int'>
    readonly data: FieldRef<"ci_sessions", 'Bytes'>
  }
    

  // Custom InputTypes

  /**
   * ci_sessions findUnique
   */
  export type ci_sessionsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * Filter, which ci_sessions to fetch.
     */
    where: ci_sessionsWhereUniqueInput
  }


  /**
   * ci_sessions findUniqueOrThrow
   */
  export type ci_sessionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * Filter, which ci_sessions to fetch.
     */
    where: ci_sessionsWhereUniqueInput
  }


  /**
   * ci_sessions findFirst
   */
  export type ci_sessionsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * Filter, which ci_sessions to fetch.
     */
    where?: ci_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ci_sessions to fetch.
     */
    orderBy?: ci_sessionsOrderByWithRelationInput | ci_sessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ci_sessions.
     */
    cursor?: ci_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ci_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ci_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ci_sessions.
     */
    distinct?: Ci_sessionsScalarFieldEnum | Ci_sessionsScalarFieldEnum[]
  }


  /**
   * ci_sessions findFirstOrThrow
   */
  export type ci_sessionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * Filter, which ci_sessions to fetch.
     */
    where?: ci_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ci_sessions to fetch.
     */
    orderBy?: ci_sessionsOrderByWithRelationInput | ci_sessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ci_sessions.
     */
    cursor?: ci_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ci_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ci_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ci_sessions.
     */
    distinct?: Ci_sessionsScalarFieldEnum | Ci_sessionsScalarFieldEnum[]
  }


  /**
   * ci_sessions findMany
   */
  export type ci_sessionsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * Filter, which ci_sessions to fetch.
     */
    where?: ci_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ci_sessions to fetch.
     */
    orderBy?: ci_sessionsOrderByWithRelationInput | ci_sessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ci_sessions.
     */
    cursor?: ci_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ci_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ci_sessions.
     */
    skip?: number
    distinct?: Ci_sessionsScalarFieldEnum | Ci_sessionsScalarFieldEnum[]
  }


  /**
   * ci_sessions create
   */
  export type ci_sessionsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * The data needed to create a ci_sessions.
     */
    data: XOR<ci_sessionsCreateInput, ci_sessionsUncheckedCreateInput>
  }


  /**
   * ci_sessions createMany
   */
  export type ci_sessionsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ci_sessions.
     */
    data: ci_sessionsCreateManyInput | ci_sessionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ci_sessions update
   */
  export type ci_sessionsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * The data needed to update a ci_sessions.
     */
    data: XOR<ci_sessionsUpdateInput, ci_sessionsUncheckedUpdateInput>
    /**
     * Choose, which ci_sessions to update.
     */
    where: ci_sessionsWhereUniqueInput
  }


  /**
   * ci_sessions updateMany
   */
  export type ci_sessionsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ci_sessions.
     */
    data: XOR<ci_sessionsUpdateManyMutationInput, ci_sessionsUncheckedUpdateManyInput>
    /**
     * Filter which ci_sessions to update
     */
    where?: ci_sessionsWhereInput
  }


  /**
   * ci_sessions upsert
   */
  export type ci_sessionsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * The filter to search for the ci_sessions to update in case it exists.
     */
    where: ci_sessionsWhereUniqueInput
    /**
     * In case the ci_sessions found by the `where` argument doesn't exist, create a new ci_sessions with this data.
     */
    create: XOR<ci_sessionsCreateInput, ci_sessionsUncheckedCreateInput>
    /**
     * In case the ci_sessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ci_sessionsUpdateInput, ci_sessionsUncheckedUpdateInput>
  }


  /**
   * ci_sessions delete
   */
  export type ci_sessionsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
    /**
     * Filter which ci_sessions to delete.
     */
    where: ci_sessionsWhereUniqueInput
  }


  /**
   * ci_sessions deleteMany
   */
  export type ci_sessionsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ci_sessions to delete
     */
    where?: ci_sessionsWhereInput
  }


  /**
   * ci_sessions without action
   */
  export type ci_sessionsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ci_sessions
     */
    select?: ci_sessionsSelect<ExtArgs> | null
  }



  /**
   * Model finalis2022
   */

  export type AggregateFinalis2022 = {
    _count: Finalis2022CountAggregateOutputType | null
    _avg: Finalis2022AvgAggregateOutputType | null
    _sum: Finalis2022SumAggregateOutputType | null
    _min: Finalis2022MinAggregateOutputType | null
    _max: Finalis2022MaxAggregateOutputType | null
  }

  export type Finalis2022AvgAggregateOutputType = {
    Year: number | null
    id: number | null
  }

  export type Finalis2022SumAggregateOutputType = {
    Year: number | null
    id: number | null
  }

  export type Finalis2022MinAggregateOutputType = {
    Name: string | null
    Major: string | null
    Year: number | null
    Tagline: string | null
    Photo: string | null
    id: number | null
  }

  export type Finalis2022MaxAggregateOutputType = {
    Name: string | null
    Major: string | null
    Year: number | null
    Tagline: string | null
    Photo: string | null
    id: number | null
  }

  export type Finalis2022CountAggregateOutputType = {
    Name: number
    Major: number
    Year: number
    Tagline: number
    Photo: number
    id: number
    _all: number
  }


  export type Finalis2022AvgAggregateInputType = {
    Year?: true
    id?: true
  }

  export type Finalis2022SumAggregateInputType = {
    Year?: true
    id?: true
  }

  export type Finalis2022MinAggregateInputType = {
    Name?: true
    Major?: true
    Year?: true
    Tagline?: true
    Photo?: true
    id?: true
  }

  export type Finalis2022MaxAggregateInputType = {
    Name?: true
    Major?: true
    Year?: true
    Tagline?: true
    Photo?: true
    id?: true
  }

  export type Finalis2022CountAggregateInputType = {
    Name?: true
    Major?: true
    Year?: true
    Tagline?: true
    Photo?: true
    id?: true
    _all?: true
  }

  export type Finalis2022AggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which finalis2022 to aggregate.
     */
    where?: finalis2022WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of finalis2022s to fetch.
     */
    orderBy?: finalis2022OrderByWithRelationInput | finalis2022OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: finalis2022WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` finalis2022s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` finalis2022s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned finalis2022s
    **/
    _count?: true | Finalis2022CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Finalis2022AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Finalis2022SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Finalis2022MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Finalis2022MaxAggregateInputType
  }

  export type GetFinalis2022AggregateType<T extends Finalis2022AggregateArgs> = {
        [P in keyof T & keyof AggregateFinalis2022]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinalis2022[P]>
      : GetScalarType<T[P], AggregateFinalis2022[P]>
  }




  export type finalis2022GroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: finalis2022WhereInput
    orderBy?: finalis2022OrderByWithAggregationInput | finalis2022OrderByWithAggregationInput[]
    by: Finalis2022ScalarFieldEnum[] | Finalis2022ScalarFieldEnum
    having?: finalis2022ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Finalis2022CountAggregateInputType | true
    _avg?: Finalis2022AvgAggregateInputType
    _sum?: Finalis2022SumAggregateInputType
    _min?: Finalis2022MinAggregateInputType
    _max?: Finalis2022MaxAggregateInputType
  }

  export type Finalis2022GroupByOutputType = {
    Name: string
    Major: string
    Year: number
    Tagline: string
    Photo: string
    id: number
    _count: Finalis2022CountAggregateOutputType | null
    _avg: Finalis2022AvgAggregateOutputType | null
    _sum: Finalis2022SumAggregateOutputType | null
    _min: Finalis2022MinAggregateOutputType | null
    _max: Finalis2022MaxAggregateOutputType | null
  }

  type GetFinalis2022GroupByPayload<T extends finalis2022GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Finalis2022GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Finalis2022GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Finalis2022GroupByOutputType[P]>
            : GetScalarType<T[P], Finalis2022GroupByOutputType[P]>
        }
      >
    >


  export type finalis2022Select<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Name?: boolean
    Major?: boolean
    Year?: boolean
    Tagline?: boolean
    Photo?: boolean
    id?: boolean
  }, ExtArgs["result"]["finalis2022"]>

  export type finalis2022SelectScalar = {
    Name?: boolean
    Major?: boolean
    Year?: boolean
    Tagline?: boolean
    Photo?: boolean
    id?: boolean
  }


  export type $finalis2022Payload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "finalis2022"
    objects: {}
    scalars: $Extensions.GetResult<{
      Name: string
      Major: string
      Year: number
      Tagline: string
      Photo: string
      id: number
    }, ExtArgs["result"]["finalis2022"]>
    composites: {}
  }


  type finalis2022GetPayload<S extends boolean | null | undefined | finalis2022DefaultArgs> = $Result.GetResult<Prisma.$finalis2022Payload, S>

  type finalis2022CountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<finalis2022FindManyArgs, 'select' | 'include'> & {
      select?: Finalis2022CountAggregateInputType | true
    }

  export interface finalis2022Delegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['finalis2022'], meta: { name: 'finalis2022' } }
    /**
     * Find zero or one Finalis2022 that matches the filter.
     * @param {finalis2022FindUniqueArgs} args - Arguments to find a Finalis2022
     * @example
     * // Get one Finalis2022
     * const finalis2022 = await prisma.finalis2022.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends finalis2022FindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, finalis2022FindUniqueArgs<ExtArgs>>
    ): Prisma__finalis2022Client<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Finalis2022 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {finalis2022FindUniqueOrThrowArgs} args - Arguments to find a Finalis2022
     * @example
     * // Get one Finalis2022
     * const finalis2022 = await prisma.finalis2022.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends finalis2022FindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, finalis2022FindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__finalis2022Client<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Finalis2022 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {finalis2022FindFirstArgs} args - Arguments to find a Finalis2022
     * @example
     * // Get one Finalis2022
     * const finalis2022 = await prisma.finalis2022.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends finalis2022FindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, finalis2022FindFirstArgs<ExtArgs>>
    ): Prisma__finalis2022Client<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Finalis2022 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {finalis2022FindFirstOrThrowArgs} args - Arguments to find a Finalis2022
     * @example
     * // Get one Finalis2022
     * const finalis2022 = await prisma.finalis2022.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends finalis2022FindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, finalis2022FindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__finalis2022Client<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Finalis2022s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {finalis2022FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Finalis2022s
     * const finalis2022s = await prisma.finalis2022.findMany()
     * 
     * // Get first 10 Finalis2022s
     * const finalis2022s = await prisma.finalis2022.findMany({ take: 10 })
     * 
     * // Only select the `Name`
     * const finalis2022WithNameOnly = await prisma.finalis2022.findMany({ select: { Name: true } })
     * 
    **/
    findMany<T extends finalis2022FindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, finalis2022FindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Finalis2022.
     * @param {finalis2022CreateArgs} args - Arguments to create a Finalis2022.
     * @example
     * // Create one Finalis2022
     * const Finalis2022 = await prisma.finalis2022.create({
     *   data: {
     *     // ... data to create a Finalis2022
     *   }
     * })
     * 
    **/
    create<T extends finalis2022CreateArgs<ExtArgs>>(
      args: SelectSubset<T, finalis2022CreateArgs<ExtArgs>>
    ): Prisma__finalis2022Client<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Finalis2022s.
     *     @param {finalis2022CreateManyArgs} args - Arguments to create many Finalis2022s.
     *     @example
     *     // Create many Finalis2022s
     *     const finalis2022 = await prisma.finalis2022.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends finalis2022CreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, finalis2022CreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Finalis2022.
     * @param {finalis2022DeleteArgs} args - Arguments to delete one Finalis2022.
     * @example
     * // Delete one Finalis2022
     * const Finalis2022 = await prisma.finalis2022.delete({
     *   where: {
     *     // ... filter to delete one Finalis2022
     *   }
     * })
     * 
    **/
    delete<T extends finalis2022DeleteArgs<ExtArgs>>(
      args: SelectSubset<T, finalis2022DeleteArgs<ExtArgs>>
    ): Prisma__finalis2022Client<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Finalis2022.
     * @param {finalis2022UpdateArgs} args - Arguments to update one Finalis2022.
     * @example
     * // Update one Finalis2022
     * const finalis2022 = await prisma.finalis2022.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends finalis2022UpdateArgs<ExtArgs>>(
      args: SelectSubset<T, finalis2022UpdateArgs<ExtArgs>>
    ): Prisma__finalis2022Client<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Finalis2022s.
     * @param {finalis2022DeleteManyArgs} args - Arguments to filter Finalis2022s to delete.
     * @example
     * // Delete a few Finalis2022s
     * const { count } = await prisma.finalis2022.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends finalis2022DeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, finalis2022DeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Finalis2022s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {finalis2022UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Finalis2022s
     * const finalis2022 = await prisma.finalis2022.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends finalis2022UpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, finalis2022UpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Finalis2022.
     * @param {finalis2022UpsertArgs} args - Arguments to update or create a Finalis2022.
     * @example
     * // Update or create a Finalis2022
     * const finalis2022 = await prisma.finalis2022.upsert({
     *   create: {
     *     // ... data to create a Finalis2022
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Finalis2022 we want to update
     *   }
     * })
    **/
    upsert<T extends finalis2022UpsertArgs<ExtArgs>>(
      args: SelectSubset<T, finalis2022UpsertArgs<ExtArgs>>
    ): Prisma__finalis2022Client<$Result.GetResult<Prisma.$finalis2022Payload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Finalis2022s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {finalis2022CountArgs} args - Arguments to filter Finalis2022s to count.
     * @example
     * // Count the number of Finalis2022s
     * const count = await prisma.finalis2022.count({
     *   where: {
     *     // ... the filter for the Finalis2022s we want to count
     *   }
     * })
    **/
    count<T extends finalis2022CountArgs>(
      args?: Subset<T, finalis2022CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Finalis2022CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Finalis2022.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Finalis2022AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Finalis2022AggregateArgs>(args: Subset<T, Finalis2022AggregateArgs>): Prisma.PrismaPromise<GetFinalis2022AggregateType<T>>

    /**
     * Group by Finalis2022.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {finalis2022GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends finalis2022GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: finalis2022GroupByArgs['orderBy'] }
        : { orderBy?: finalis2022GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, finalis2022GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinalis2022GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the finalis2022 model
   */
  readonly fields: finalis2022FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for finalis2022.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__finalis2022Client<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the finalis2022 model
   */ 
  interface finalis2022FieldRefs {
    readonly Name: FieldRef<"finalis2022", 'String'>
    readonly Major: FieldRef<"finalis2022", 'String'>
    readonly Year: FieldRef<"finalis2022", 'Int'>
    readonly Tagline: FieldRef<"finalis2022", 'String'>
    readonly Photo: FieldRef<"finalis2022", 'String'>
    readonly id: FieldRef<"finalis2022", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * finalis2022 findUnique
   */
  export type finalis2022FindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * Filter, which finalis2022 to fetch.
     */
    where: finalis2022WhereUniqueInput
  }


  /**
   * finalis2022 findUniqueOrThrow
   */
  export type finalis2022FindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * Filter, which finalis2022 to fetch.
     */
    where: finalis2022WhereUniqueInput
  }


  /**
   * finalis2022 findFirst
   */
  export type finalis2022FindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * Filter, which finalis2022 to fetch.
     */
    where?: finalis2022WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of finalis2022s to fetch.
     */
    orderBy?: finalis2022OrderByWithRelationInput | finalis2022OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for finalis2022s.
     */
    cursor?: finalis2022WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` finalis2022s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` finalis2022s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of finalis2022s.
     */
    distinct?: Finalis2022ScalarFieldEnum | Finalis2022ScalarFieldEnum[]
  }


  /**
   * finalis2022 findFirstOrThrow
   */
  export type finalis2022FindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * Filter, which finalis2022 to fetch.
     */
    where?: finalis2022WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of finalis2022s to fetch.
     */
    orderBy?: finalis2022OrderByWithRelationInput | finalis2022OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for finalis2022s.
     */
    cursor?: finalis2022WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` finalis2022s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` finalis2022s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of finalis2022s.
     */
    distinct?: Finalis2022ScalarFieldEnum | Finalis2022ScalarFieldEnum[]
  }


  /**
   * finalis2022 findMany
   */
  export type finalis2022FindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * Filter, which finalis2022s to fetch.
     */
    where?: finalis2022WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of finalis2022s to fetch.
     */
    orderBy?: finalis2022OrderByWithRelationInput | finalis2022OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing finalis2022s.
     */
    cursor?: finalis2022WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` finalis2022s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` finalis2022s.
     */
    skip?: number
    distinct?: Finalis2022ScalarFieldEnum | Finalis2022ScalarFieldEnum[]
  }


  /**
   * finalis2022 create
   */
  export type finalis2022CreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * The data needed to create a finalis2022.
     */
    data: XOR<finalis2022CreateInput, finalis2022UncheckedCreateInput>
  }


  /**
   * finalis2022 createMany
   */
  export type finalis2022CreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many finalis2022s.
     */
    data: finalis2022CreateManyInput | finalis2022CreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * finalis2022 update
   */
  export type finalis2022UpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * The data needed to update a finalis2022.
     */
    data: XOR<finalis2022UpdateInput, finalis2022UncheckedUpdateInput>
    /**
     * Choose, which finalis2022 to update.
     */
    where: finalis2022WhereUniqueInput
  }


  /**
   * finalis2022 updateMany
   */
  export type finalis2022UpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update finalis2022s.
     */
    data: XOR<finalis2022UpdateManyMutationInput, finalis2022UncheckedUpdateManyInput>
    /**
     * Filter which finalis2022s to update
     */
    where?: finalis2022WhereInput
  }


  /**
   * finalis2022 upsert
   */
  export type finalis2022UpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * The filter to search for the finalis2022 to update in case it exists.
     */
    where: finalis2022WhereUniqueInput
    /**
     * In case the finalis2022 found by the `where` argument doesn't exist, create a new finalis2022 with this data.
     */
    create: XOR<finalis2022CreateInput, finalis2022UncheckedCreateInput>
    /**
     * In case the finalis2022 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<finalis2022UpdateInput, finalis2022UncheckedUpdateInput>
  }


  /**
   * finalis2022 delete
   */
  export type finalis2022DeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
    /**
     * Filter which finalis2022 to delete.
     */
    where: finalis2022WhereUniqueInput
  }


  /**
   * finalis2022 deleteMany
   */
  export type finalis2022DeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which finalis2022s to delete
     */
    where?: finalis2022WhereInput
  }


  /**
   * finalis2022 without action
   */
  export type finalis2022DefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the finalis2022
     */
    select?: finalis2022Select<ExtArgs> | null
  }



  /**
   * Model metanoia
   */

  export type AggregateMetanoia = {
    _count: MetanoiaCountAggregateOutputType | null
    _min: MetanoiaMinAggregateOutputType | null
    _max: MetanoiaMaxAggregateOutputType | null
  }

  export type MetanoiaMinAggregateOutputType = {
    Name: string | null
    Email: string | null
    PhoneNumber: string | null
    TransactionProof: string | null
    Origin: string | null
    TransactionDate: string | null
  }

  export type MetanoiaMaxAggregateOutputType = {
    Name: string | null
    Email: string | null
    PhoneNumber: string | null
    TransactionProof: string | null
    Origin: string | null
    TransactionDate: string | null
  }

  export type MetanoiaCountAggregateOutputType = {
    Name: number
    Email: number
    PhoneNumber: number
    TransactionProof: number
    Origin: number
    TransactionDate: number
    _all: number
  }


  export type MetanoiaMinAggregateInputType = {
    Name?: true
    Email?: true
    PhoneNumber?: true
    TransactionProof?: true
    Origin?: true
    TransactionDate?: true
  }

  export type MetanoiaMaxAggregateInputType = {
    Name?: true
    Email?: true
    PhoneNumber?: true
    TransactionProof?: true
    Origin?: true
    TransactionDate?: true
  }

  export type MetanoiaCountAggregateInputType = {
    Name?: true
    Email?: true
    PhoneNumber?: true
    TransactionProof?: true
    Origin?: true
    TransactionDate?: true
    _all?: true
  }

  export type MetanoiaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which metanoia to aggregate.
     */
    where?: metanoiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metanoias to fetch.
     */
    orderBy?: metanoiaOrderByWithRelationInput | metanoiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: metanoiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metanoias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metanoias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned metanoias
    **/
    _count?: true | MetanoiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetanoiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetanoiaMaxAggregateInputType
  }

  export type GetMetanoiaAggregateType<T extends MetanoiaAggregateArgs> = {
        [P in keyof T & keyof AggregateMetanoia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetanoia[P]>
      : GetScalarType<T[P], AggregateMetanoia[P]>
  }




  export type metanoiaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: metanoiaWhereInput
    orderBy?: metanoiaOrderByWithAggregationInput | metanoiaOrderByWithAggregationInput[]
    by: MetanoiaScalarFieldEnum[] | MetanoiaScalarFieldEnum
    having?: metanoiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetanoiaCountAggregateInputType | true
    _min?: MetanoiaMinAggregateInputType
    _max?: MetanoiaMaxAggregateInputType
  }

  export type MetanoiaGroupByOutputType = {
    Name: string
    Email: string
    PhoneNumber: string
    TransactionProof: string
    Origin: string
    TransactionDate: string
    _count: MetanoiaCountAggregateOutputType | null
    _min: MetanoiaMinAggregateOutputType | null
    _max: MetanoiaMaxAggregateOutputType | null
  }

  type GetMetanoiaGroupByPayload<T extends metanoiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetanoiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetanoiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetanoiaGroupByOutputType[P]>
            : GetScalarType<T[P], MetanoiaGroupByOutputType[P]>
        }
      >
    >


  export type metanoiaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Name?: boolean
    Email?: boolean
    PhoneNumber?: boolean
    TransactionProof?: boolean
    Origin?: boolean
    TransactionDate?: boolean
  }, ExtArgs["result"]["metanoia"]>

  export type metanoiaSelectScalar = {
    Name?: boolean
    Email?: boolean
    PhoneNumber?: boolean
    TransactionProof?: boolean
    Origin?: boolean
    TransactionDate?: boolean
  }


  export type $metanoiaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "metanoia"
    objects: {}
    scalars: $Extensions.GetResult<{
      Name: string
      Email: string
      PhoneNumber: string
      TransactionProof: string
      Origin: string
      TransactionDate: string
    }, ExtArgs["result"]["metanoia"]>
    composites: {}
  }


  type metanoiaGetPayload<S extends boolean | null | undefined | metanoiaDefaultArgs> = $Result.GetResult<Prisma.$metanoiaPayload, S>

  type metanoiaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<metanoiaFindManyArgs, 'select' | 'include'> & {
      select?: MetanoiaCountAggregateInputType | true
    }

  export interface metanoiaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['metanoia'], meta: { name: 'metanoia' } }
    /**
     * Find zero or one Metanoia that matches the filter.
     * @param {metanoiaFindUniqueArgs} args - Arguments to find a Metanoia
     * @example
     * // Get one Metanoia
     * const metanoia = await prisma.metanoia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends metanoiaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, metanoiaFindUniqueArgs<ExtArgs>>
    ): Prisma__metanoiaClient<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Metanoia that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {metanoiaFindUniqueOrThrowArgs} args - Arguments to find a Metanoia
     * @example
     * // Get one Metanoia
     * const metanoia = await prisma.metanoia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends metanoiaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, metanoiaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__metanoiaClient<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Metanoia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metanoiaFindFirstArgs} args - Arguments to find a Metanoia
     * @example
     * // Get one Metanoia
     * const metanoia = await prisma.metanoia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends metanoiaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, metanoiaFindFirstArgs<ExtArgs>>
    ): Prisma__metanoiaClient<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Metanoia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metanoiaFindFirstOrThrowArgs} args - Arguments to find a Metanoia
     * @example
     * // Get one Metanoia
     * const metanoia = await prisma.metanoia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends metanoiaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, metanoiaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__metanoiaClient<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Metanoias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metanoiaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Metanoias
     * const metanoias = await prisma.metanoia.findMany()
     * 
     * // Get first 10 Metanoias
     * const metanoias = await prisma.metanoia.findMany({ take: 10 })
     * 
     * // Only select the `Name`
     * const metanoiaWithNameOnly = await prisma.metanoia.findMany({ select: { Name: true } })
     * 
    **/
    findMany<T extends metanoiaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, metanoiaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Metanoia.
     * @param {metanoiaCreateArgs} args - Arguments to create a Metanoia.
     * @example
     * // Create one Metanoia
     * const Metanoia = await prisma.metanoia.create({
     *   data: {
     *     // ... data to create a Metanoia
     *   }
     * })
     * 
    **/
    create<T extends metanoiaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, metanoiaCreateArgs<ExtArgs>>
    ): Prisma__metanoiaClient<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Metanoias.
     *     @param {metanoiaCreateManyArgs} args - Arguments to create many Metanoias.
     *     @example
     *     // Create many Metanoias
     *     const metanoia = await prisma.metanoia.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends metanoiaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, metanoiaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Metanoia.
     * @param {metanoiaDeleteArgs} args - Arguments to delete one Metanoia.
     * @example
     * // Delete one Metanoia
     * const Metanoia = await prisma.metanoia.delete({
     *   where: {
     *     // ... filter to delete one Metanoia
     *   }
     * })
     * 
    **/
    delete<T extends metanoiaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, metanoiaDeleteArgs<ExtArgs>>
    ): Prisma__metanoiaClient<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Metanoia.
     * @param {metanoiaUpdateArgs} args - Arguments to update one Metanoia.
     * @example
     * // Update one Metanoia
     * const metanoia = await prisma.metanoia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends metanoiaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, metanoiaUpdateArgs<ExtArgs>>
    ): Prisma__metanoiaClient<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Metanoias.
     * @param {metanoiaDeleteManyArgs} args - Arguments to filter Metanoias to delete.
     * @example
     * // Delete a few Metanoias
     * const { count } = await prisma.metanoia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends metanoiaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, metanoiaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Metanoias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metanoiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Metanoias
     * const metanoia = await prisma.metanoia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends metanoiaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, metanoiaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Metanoia.
     * @param {metanoiaUpsertArgs} args - Arguments to update or create a Metanoia.
     * @example
     * // Update or create a Metanoia
     * const metanoia = await prisma.metanoia.upsert({
     *   create: {
     *     // ... data to create a Metanoia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Metanoia we want to update
     *   }
     * })
    **/
    upsert<T extends metanoiaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, metanoiaUpsertArgs<ExtArgs>>
    ): Prisma__metanoiaClient<$Result.GetResult<Prisma.$metanoiaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Metanoias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metanoiaCountArgs} args - Arguments to filter Metanoias to count.
     * @example
     * // Count the number of Metanoias
     * const count = await prisma.metanoia.count({
     *   where: {
     *     // ... the filter for the Metanoias we want to count
     *   }
     * })
    **/
    count<T extends metanoiaCountArgs>(
      args?: Subset<T, metanoiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetanoiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Metanoia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetanoiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetanoiaAggregateArgs>(args: Subset<T, MetanoiaAggregateArgs>): Prisma.PrismaPromise<GetMetanoiaAggregateType<T>>

    /**
     * Group by Metanoia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metanoiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends metanoiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: metanoiaGroupByArgs['orderBy'] }
        : { orderBy?: metanoiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, metanoiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetanoiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the metanoia model
   */
  readonly fields: metanoiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for metanoia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__metanoiaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the metanoia model
   */ 
  interface metanoiaFieldRefs {
    readonly Name: FieldRef<"metanoia", 'String'>
    readonly Email: FieldRef<"metanoia", 'String'>
    readonly PhoneNumber: FieldRef<"metanoia", 'String'>
    readonly TransactionProof: FieldRef<"metanoia", 'String'>
    readonly Origin: FieldRef<"metanoia", 'String'>
    readonly TransactionDate: FieldRef<"metanoia", 'String'>
  }
    

  // Custom InputTypes

  /**
   * metanoia findUnique
   */
  export type metanoiaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * Filter, which metanoia to fetch.
     */
    where: metanoiaWhereUniqueInput
  }


  /**
   * metanoia findUniqueOrThrow
   */
  export type metanoiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * Filter, which metanoia to fetch.
     */
    where: metanoiaWhereUniqueInput
  }


  /**
   * metanoia findFirst
   */
  export type metanoiaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * Filter, which metanoia to fetch.
     */
    where?: metanoiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metanoias to fetch.
     */
    orderBy?: metanoiaOrderByWithRelationInput | metanoiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for metanoias.
     */
    cursor?: metanoiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metanoias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metanoias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of metanoias.
     */
    distinct?: MetanoiaScalarFieldEnum | MetanoiaScalarFieldEnum[]
  }


  /**
   * metanoia findFirstOrThrow
   */
  export type metanoiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * Filter, which metanoia to fetch.
     */
    where?: metanoiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metanoias to fetch.
     */
    orderBy?: metanoiaOrderByWithRelationInput | metanoiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for metanoias.
     */
    cursor?: metanoiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metanoias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metanoias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of metanoias.
     */
    distinct?: MetanoiaScalarFieldEnum | MetanoiaScalarFieldEnum[]
  }


  /**
   * metanoia findMany
   */
  export type metanoiaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * Filter, which metanoias to fetch.
     */
    where?: metanoiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metanoias to fetch.
     */
    orderBy?: metanoiaOrderByWithRelationInput | metanoiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing metanoias.
     */
    cursor?: metanoiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metanoias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metanoias.
     */
    skip?: number
    distinct?: MetanoiaScalarFieldEnum | MetanoiaScalarFieldEnum[]
  }


  /**
   * metanoia create
   */
  export type metanoiaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * The data needed to create a metanoia.
     */
    data: XOR<metanoiaCreateInput, metanoiaUncheckedCreateInput>
  }


  /**
   * metanoia createMany
   */
  export type metanoiaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many metanoias.
     */
    data: metanoiaCreateManyInput | metanoiaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * metanoia update
   */
  export type metanoiaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * The data needed to update a metanoia.
     */
    data: XOR<metanoiaUpdateInput, metanoiaUncheckedUpdateInput>
    /**
     * Choose, which metanoia to update.
     */
    where: metanoiaWhereUniqueInput
  }


  /**
   * metanoia updateMany
   */
  export type metanoiaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update metanoias.
     */
    data: XOR<metanoiaUpdateManyMutationInput, metanoiaUncheckedUpdateManyInput>
    /**
     * Filter which metanoias to update
     */
    where?: metanoiaWhereInput
  }


  /**
   * metanoia upsert
   */
  export type metanoiaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * The filter to search for the metanoia to update in case it exists.
     */
    where: metanoiaWhereUniqueInput
    /**
     * In case the metanoia found by the `where` argument doesn't exist, create a new metanoia with this data.
     */
    create: XOR<metanoiaCreateInput, metanoiaUncheckedCreateInput>
    /**
     * In case the metanoia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<metanoiaUpdateInput, metanoiaUncheckedUpdateInput>
  }


  /**
   * metanoia delete
   */
  export type metanoiaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
    /**
     * Filter which metanoia to delete.
     */
    where: metanoiaWhereUniqueInput
  }


  /**
   * metanoia deleteMany
   */
  export type metanoiaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which metanoias to delete
     */
    where?: metanoiaWhereInput
  }


  /**
   * metanoia without action
   */
  export type metanoiaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metanoia
     */
    select?: metanoiaSelect<ExtArgs> | null
  }



  /**
   * Model peserta
   */

  export type AggregatePeserta = {
    _count: PesertaCountAggregateOutputType | null
    _avg: PesertaAvgAggregateOutputType | null
    _sum: PesertaSumAggregateOutputType | null
    _min: PesertaMinAggregateOutputType | null
    _max: PesertaMaxAggregateOutputType | null
  }

  export type PesertaAvgAggregateOutputType = {
    shoeSize: number | null
    Status: number | null
  }

  export type PesertaSumAggregateOutputType = {
    shoeSize: number | null
    Status: number | null
  }

  export type PesertaMinAggregateOutputType = {
    Name: string | null
    StudentID: string | null
    Email: string | null
    gender: string | null
    BirthDate: Date | null
    BirthPlace: string | null
    Address: string | null
    PhoneNumber: string | null
    LineID: string | null
    IGUsername: string | null
    Major: string | null
    Year: string | null
    GPA: string | null
    gpaPict: string | null
    Height: string | null
    Weight: string | null
    clothesSize: string | null
    pantsSize: string | null
    shoeSize: number | null
    AboutMe: string | null
    Motivation: string | null
    Talents: string | null
    OrganizationExperience: string | null
    Achievements: string | null
    RoleModelCharacter: string | null
    picture: string | null
    personality: string | null
    essai: string | null
    Status: number | null
    QuestionType: string | null
  }

  export type PesertaMaxAggregateOutputType = {
    Name: string | null
    StudentID: string | null
    Email: string | null
    gender: string | null
    BirthDate: Date | null
    BirthPlace: string | null
    Address: string | null
    PhoneNumber: string | null
    LineID: string | null
    IGUsername: string | null
    Major: string | null
    Year: string | null
    GPA: string | null
    gpaPict: string | null
    Height: string | null
    Weight: string | null
    clothesSize: string | null
    pantsSize: string | null
    shoeSize: number | null
    AboutMe: string | null
    Motivation: string | null
    Talents: string | null
    OrganizationExperience: string | null
    Achievements: string | null
    RoleModelCharacter: string | null
    picture: string | null
    personality: string | null
    essai: string | null
    Status: number | null
    QuestionType: string | null
  }

  export type PesertaCountAggregateOutputType = {
    Name: number
    StudentID: number
    Email: number
    gender: number
    BirthDate: number
    BirthPlace: number
    Address: number
    PhoneNumber: number
    LineID: number
    IGUsername: number
    Major: number
    Year: number
    GPA: number
    gpaPict: number
    Height: number
    Weight: number
    clothesSize: number
    pantsSize: number
    shoeSize: number
    AboutMe: number
    Motivation: number
    Talents: number
    OrganizationExperience: number
    Achievements: number
    RoleModelCharacter: number
    picture: number
    personality: number
    essai: number
    Status: number
    QuestionType: number
    _all: number
  }


  export type PesertaAvgAggregateInputType = {
    shoeSize?: true
    Status?: true
  }

  export type PesertaSumAggregateInputType = {
    shoeSize?: true
    Status?: true
  }

  export type PesertaMinAggregateInputType = {
    Name?: true
    StudentID?: true
    Email?: true
    gender?: true
    BirthDate?: true
    BirthPlace?: true
    Address?: true
    PhoneNumber?: true
    LineID?: true
    IGUsername?: true
    Major?: true
    Year?: true
    GPA?: true
    gpaPict?: true
    Height?: true
    Weight?: true
    clothesSize?: true
    pantsSize?: true
    shoeSize?: true
    AboutMe?: true
    Motivation?: true
    Talents?: true
    OrganizationExperience?: true
    Achievements?: true
    RoleModelCharacter?: true
    picture?: true
    personality?: true
    essai?: true
    Status?: true
    QuestionType?: true
  }

  export type PesertaMaxAggregateInputType = {
    Name?: true
    StudentID?: true
    Email?: true
    gender?: true
    BirthDate?: true
    BirthPlace?: true
    Address?: true
    PhoneNumber?: true
    LineID?: true
    IGUsername?: true
    Major?: true
    Year?: true
    GPA?: true
    gpaPict?: true
    Height?: true
    Weight?: true
    clothesSize?: true
    pantsSize?: true
    shoeSize?: true
    AboutMe?: true
    Motivation?: true
    Talents?: true
    OrganizationExperience?: true
    Achievements?: true
    RoleModelCharacter?: true
    picture?: true
    personality?: true
    essai?: true
    Status?: true
    QuestionType?: true
  }

  export type PesertaCountAggregateInputType = {
    Name?: true
    StudentID?: true
    Email?: true
    gender?: true
    BirthDate?: true
    BirthPlace?: true
    Address?: true
    PhoneNumber?: true
    LineID?: true
    IGUsername?: true
    Major?: true
    Year?: true
    GPA?: true
    gpaPict?: true
    Height?: true
    Weight?: true
    clothesSize?: true
    pantsSize?: true
    shoeSize?: true
    AboutMe?: true
    Motivation?: true
    Talents?: true
    OrganizationExperience?: true
    Achievements?: true
    RoleModelCharacter?: true
    picture?: true
    personality?: true
    essai?: true
    Status?: true
    QuestionType?: true
    _all?: true
  }

  export type PesertaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which peserta to aggregate.
     */
    where?: pesertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pesertas to fetch.
     */
    orderBy?: pesertaOrderByWithRelationInput | pesertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pesertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pesertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pesertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pesertas
    **/
    _count?: true | PesertaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PesertaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PesertaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PesertaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PesertaMaxAggregateInputType
  }

  export type GetPesertaAggregateType<T extends PesertaAggregateArgs> = {
        [P in keyof T & keyof AggregatePeserta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePeserta[P]>
      : GetScalarType<T[P], AggregatePeserta[P]>
  }




  export type pesertaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: pesertaWhereInput
    orderBy?: pesertaOrderByWithAggregationInput | pesertaOrderByWithAggregationInput[]
    by: PesertaScalarFieldEnum[] | PesertaScalarFieldEnum
    having?: pesertaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PesertaCountAggregateInputType | true
    _avg?: PesertaAvgAggregateInputType
    _sum?: PesertaSumAggregateInputType
    _min?: PesertaMinAggregateInputType
    _max?: PesertaMaxAggregateInputType
  }

  export type PesertaGroupByOutputType = {
    Name: string
    StudentID: string
    Email: string
    gender: string
    BirthDate: Date
    BirthPlace: string
    Address: string
    PhoneNumber: string
    LineID: string
    IGUsername: string
    Major: string
    Year: string
    GPA: string
    gpaPict: string
    Height: string
    Weight: string
    clothesSize: string
    pantsSize: string
    shoeSize: number
    AboutMe: string
    Motivation: string
    Talents: string
    OrganizationExperience: string
    Achievements: string
    RoleModelCharacter: string
    picture: string
    personality: string
    essai: string
    Status: number
    QuestionType: string
    _count: PesertaCountAggregateOutputType | null
    _avg: PesertaAvgAggregateOutputType | null
    _sum: PesertaSumAggregateOutputType | null
    _min: PesertaMinAggregateOutputType | null
    _max: PesertaMaxAggregateOutputType | null
  }

  type GetPesertaGroupByPayload<T extends pesertaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PesertaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PesertaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PesertaGroupByOutputType[P]>
            : GetScalarType<T[P], PesertaGroupByOutputType[P]>
        }
      >
    >


  export type pesertaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Name?: boolean
    StudentID?: boolean
    Email?: boolean
    gender?: boolean
    BirthDate?: boolean
    BirthPlace?: boolean
    Address?: boolean
    PhoneNumber?: boolean
    LineID?: boolean
    IGUsername?: boolean
    Major?: boolean
    Year?: boolean
    GPA?: boolean
    gpaPict?: boolean
    Height?: boolean
    Weight?: boolean
    clothesSize?: boolean
    pantsSize?: boolean
    shoeSize?: boolean
    AboutMe?: boolean
    Motivation?: boolean
    Talents?: boolean
    OrganizationExperience?: boolean
    Achievements?: boolean
    RoleModelCharacter?: boolean
    picture?: boolean
    personality?: boolean
    essai?: boolean
    Status?: boolean
    QuestionType?: boolean
  }, ExtArgs["result"]["peserta"]>

  export type pesertaSelectScalar = {
    Name?: boolean
    StudentID?: boolean
    Email?: boolean
    gender?: boolean
    BirthDate?: boolean
    BirthPlace?: boolean
    Address?: boolean
    PhoneNumber?: boolean
    LineID?: boolean
    IGUsername?: boolean
    Major?: boolean
    Year?: boolean
    GPA?: boolean
    gpaPict?: boolean
    Height?: boolean
    Weight?: boolean
    clothesSize?: boolean
    pantsSize?: boolean
    shoeSize?: boolean
    AboutMe?: boolean
    Motivation?: boolean
    Talents?: boolean
    OrganizationExperience?: boolean
    Achievements?: boolean
    RoleModelCharacter?: boolean
    picture?: boolean
    personality?: boolean
    essai?: boolean
    Status?: boolean
    QuestionType?: boolean
  }


  export type $pesertaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "peserta"
    objects: {}
    scalars: $Extensions.GetResult<{
      Name: string
      StudentID: string
      Email: string
      gender: string
      BirthDate: Date
      BirthPlace: string
      Address: string
      PhoneNumber: string
      LineID: string
      IGUsername: string
      Major: string
      Year: string
      GPA: string
      gpaPict: string
      Height: string
      Weight: string
      clothesSize: string
      pantsSize: string
      shoeSize: number
      AboutMe: string
      Motivation: string
      Talents: string
      OrganizationExperience: string
      Achievements: string
      RoleModelCharacter: string
      picture: string
      personality: string
      essai: string
      Status: number
      QuestionType: string
    }, ExtArgs["result"]["peserta"]>
    composites: {}
  }


  type pesertaGetPayload<S extends boolean | null | undefined | pesertaDefaultArgs> = $Result.GetResult<Prisma.$pesertaPayload, S>

  type pesertaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<pesertaFindManyArgs, 'select' | 'include'> & {
      select?: PesertaCountAggregateInputType | true
    }

  export interface pesertaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['peserta'], meta: { name: 'peserta' } }
    /**
     * Find zero or one Peserta that matches the filter.
     * @param {pesertaFindUniqueArgs} args - Arguments to find a Peserta
     * @example
     * // Get one Peserta
     * const peserta = await prisma.peserta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pesertaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, pesertaFindUniqueArgs<ExtArgs>>
    ): Prisma__pesertaClient<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Peserta that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {pesertaFindUniqueOrThrowArgs} args - Arguments to find a Peserta
     * @example
     * // Get one Peserta
     * const peserta = await prisma.peserta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pesertaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pesertaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__pesertaClient<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Peserta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pesertaFindFirstArgs} args - Arguments to find a Peserta
     * @example
     * // Get one Peserta
     * const peserta = await prisma.peserta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pesertaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, pesertaFindFirstArgs<ExtArgs>>
    ): Prisma__pesertaClient<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Peserta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pesertaFindFirstOrThrowArgs} args - Arguments to find a Peserta
     * @example
     * // Get one Peserta
     * const peserta = await prisma.peserta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pesertaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pesertaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__pesertaClient<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pesertas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pesertaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pesertas
     * const pesertas = await prisma.peserta.findMany()
     * 
     * // Get first 10 Pesertas
     * const pesertas = await prisma.peserta.findMany({ take: 10 })
     * 
     * // Only select the `Name`
     * const pesertaWithNameOnly = await prisma.peserta.findMany({ select: { Name: true } })
     * 
    **/
    findMany<T extends pesertaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pesertaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Peserta.
     * @param {pesertaCreateArgs} args - Arguments to create a Peserta.
     * @example
     * // Create one Peserta
     * const Peserta = await prisma.peserta.create({
     *   data: {
     *     // ... data to create a Peserta
     *   }
     * })
     * 
    **/
    create<T extends pesertaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, pesertaCreateArgs<ExtArgs>>
    ): Prisma__pesertaClient<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pesertas.
     *     @param {pesertaCreateManyArgs} args - Arguments to create many Pesertas.
     *     @example
     *     // Create many Pesertas
     *     const peserta = await prisma.peserta.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends pesertaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pesertaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Peserta.
     * @param {pesertaDeleteArgs} args - Arguments to delete one Peserta.
     * @example
     * // Delete one Peserta
     * const Peserta = await prisma.peserta.delete({
     *   where: {
     *     // ... filter to delete one Peserta
     *   }
     * })
     * 
    **/
    delete<T extends pesertaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, pesertaDeleteArgs<ExtArgs>>
    ): Prisma__pesertaClient<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Peserta.
     * @param {pesertaUpdateArgs} args - Arguments to update one Peserta.
     * @example
     * // Update one Peserta
     * const peserta = await prisma.peserta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pesertaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, pesertaUpdateArgs<ExtArgs>>
    ): Prisma__pesertaClient<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pesertas.
     * @param {pesertaDeleteManyArgs} args - Arguments to filter Pesertas to delete.
     * @example
     * // Delete a few Pesertas
     * const { count } = await prisma.peserta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pesertaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pesertaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pesertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pesertaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pesertas
     * const peserta = await prisma.peserta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pesertaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, pesertaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Peserta.
     * @param {pesertaUpsertArgs} args - Arguments to update or create a Peserta.
     * @example
     * // Update or create a Peserta
     * const peserta = await prisma.peserta.upsert({
     *   create: {
     *     // ... data to create a Peserta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Peserta we want to update
     *   }
     * })
    **/
    upsert<T extends pesertaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, pesertaUpsertArgs<ExtArgs>>
    ): Prisma__pesertaClient<$Result.GetResult<Prisma.$pesertaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pesertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pesertaCountArgs} args - Arguments to filter Pesertas to count.
     * @example
     * // Count the number of Pesertas
     * const count = await prisma.peserta.count({
     *   where: {
     *     // ... the filter for the Pesertas we want to count
     *   }
     * })
    **/
    count<T extends pesertaCountArgs>(
      args?: Subset<T, pesertaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PesertaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Peserta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesertaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PesertaAggregateArgs>(args: Subset<T, PesertaAggregateArgs>): Prisma.PrismaPromise<GetPesertaAggregateType<T>>

    /**
     * Group by Peserta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pesertaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pesertaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pesertaGroupByArgs['orderBy'] }
        : { orderBy?: pesertaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pesertaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPesertaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the peserta model
   */
  readonly fields: pesertaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for peserta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pesertaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the peserta model
   */ 
  interface pesertaFieldRefs {
    readonly Name: FieldRef<"peserta", 'String'>
    readonly StudentID: FieldRef<"peserta", 'String'>
    readonly Email: FieldRef<"peserta", 'String'>
    readonly gender: FieldRef<"peserta", 'String'>
    readonly BirthDate: FieldRef<"peserta", 'DateTime'>
    readonly BirthPlace: FieldRef<"peserta", 'String'>
    readonly Address: FieldRef<"peserta", 'String'>
    readonly PhoneNumber: FieldRef<"peserta", 'String'>
    readonly LineID: FieldRef<"peserta", 'String'>
    readonly IGUsername: FieldRef<"peserta", 'String'>
    readonly Major: FieldRef<"peserta", 'String'>
    readonly Year: FieldRef<"peserta", 'String'>
    readonly GPA: FieldRef<"peserta", 'String'>
    readonly gpaPict: FieldRef<"peserta", 'String'>
    readonly Height: FieldRef<"peserta", 'String'>
    readonly Weight: FieldRef<"peserta", 'String'>
    readonly clothesSize: FieldRef<"peserta", 'String'>
    readonly pantsSize: FieldRef<"peserta", 'String'>
    readonly shoeSize: FieldRef<"peserta", 'Int'>
    readonly AboutMe: FieldRef<"peserta", 'String'>
    readonly Motivation: FieldRef<"peserta", 'String'>
    readonly Talents: FieldRef<"peserta", 'String'>
    readonly OrganizationExperience: FieldRef<"peserta", 'String'>
    readonly Achievements: FieldRef<"peserta", 'String'>
    readonly RoleModelCharacter: FieldRef<"peserta", 'String'>
    readonly picture: FieldRef<"peserta", 'String'>
    readonly personality: FieldRef<"peserta", 'String'>
    readonly essai: FieldRef<"peserta", 'String'>
    readonly Status: FieldRef<"peserta", 'Int'>
    readonly QuestionType: FieldRef<"peserta", 'String'>
  }
    

  // Custom InputTypes

  /**
   * peserta findUnique
   */
  export type pesertaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * Filter, which peserta to fetch.
     */
    where: pesertaWhereUniqueInput
  }


  /**
   * peserta findUniqueOrThrow
   */
  export type pesertaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * Filter, which peserta to fetch.
     */
    where: pesertaWhereUniqueInput
  }


  /**
   * peserta findFirst
   */
  export type pesertaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * Filter, which peserta to fetch.
     */
    where?: pesertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pesertas to fetch.
     */
    orderBy?: pesertaOrderByWithRelationInput | pesertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pesertas.
     */
    cursor?: pesertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pesertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pesertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pesertas.
     */
    distinct?: PesertaScalarFieldEnum | PesertaScalarFieldEnum[]
  }


  /**
   * peserta findFirstOrThrow
   */
  export type pesertaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * Filter, which peserta to fetch.
     */
    where?: pesertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pesertas to fetch.
     */
    orderBy?: pesertaOrderByWithRelationInput | pesertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pesertas.
     */
    cursor?: pesertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pesertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pesertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pesertas.
     */
    distinct?: PesertaScalarFieldEnum | PesertaScalarFieldEnum[]
  }


  /**
   * peserta findMany
   */
  export type pesertaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * Filter, which pesertas to fetch.
     */
    where?: pesertaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pesertas to fetch.
     */
    orderBy?: pesertaOrderByWithRelationInput | pesertaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pesertas.
     */
    cursor?: pesertaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pesertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pesertas.
     */
    skip?: number
    distinct?: PesertaScalarFieldEnum | PesertaScalarFieldEnum[]
  }


  /**
   * peserta create
   */
  export type pesertaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * The data needed to create a peserta.
     */
    data: XOR<pesertaCreateInput, pesertaUncheckedCreateInput>
  }


  /**
   * peserta createMany
   */
  export type pesertaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pesertas.
     */
    data: pesertaCreateManyInput | pesertaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * peserta update
   */
  export type pesertaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * The data needed to update a peserta.
     */
    data: XOR<pesertaUpdateInput, pesertaUncheckedUpdateInput>
    /**
     * Choose, which peserta to update.
     */
    where: pesertaWhereUniqueInput
  }


  /**
   * peserta updateMany
   */
  export type pesertaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pesertas.
     */
    data: XOR<pesertaUpdateManyMutationInput, pesertaUncheckedUpdateManyInput>
    /**
     * Filter which pesertas to update
     */
    where?: pesertaWhereInput
  }


  /**
   * peserta upsert
   */
  export type pesertaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * The filter to search for the peserta to update in case it exists.
     */
    where: pesertaWhereUniqueInput
    /**
     * In case the peserta found by the `where` argument doesn't exist, create a new peserta with this data.
     */
    create: XOR<pesertaCreateInput, pesertaUncheckedCreateInput>
    /**
     * In case the peserta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pesertaUpdateInput, pesertaUncheckedUpdateInput>
  }


  /**
   * peserta delete
   */
  export type pesertaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
    /**
     * Filter which peserta to delete.
     */
    where: pesertaWhereUniqueInput
  }


  /**
   * peserta deleteMany
   */
  export type pesertaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which pesertas to delete
     */
    where?: pesertaWhereInput
  }


  /**
   * peserta without action
   */
  export type pesertaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta
     */
    select?: pesertaSelect<ExtArgs> | null
  }



  /**
   * Model peserta_2023
   */

  export type AggregatePeserta_2023 = {
    _count: Peserta_2023CountAggregateOutputType | null
    _avg: Peserta_2023AvgAggregateOutputType | null
    _sum: Peserta_2023SumAggregateOutputType | null
    _min: Peserta_2023MinAggregateOutputType | null
    _max: Peserta_2023MaxAggregateOutputType | null
  }

  export type Peserta_2023AvgAggregateOutputType = {
    id: number | null
    shoe_size: number | null
  }

  export type Peserta_2023SumAggregateOutputType = {
    id: number | null
    shoe_size: number | null
  }

  export type Peserta_2023MinAggregateOutputType = {
    id: number | null
    name: string | null
    nim: string | null
    email_student: string | null
    birth_place: string | null
    birth_date: Date | null
    gender: string | null
    address: string | null
    phone_number: string | null
    line_id: string | null
    instagram_username: string | null
    tiktok_username: string | null
    major: string | null
    year: string | null
    sub_gpa: string | null
    gpa: string | null
    height: string | null
    weight: string | null
    clothes_size: string | null
    shoe_size: number | null
    pants_size: string | null
    about_me: string | null
    motivation: string | null
    personality: string | null
    talents: string | null
    achievements: string | null
    picture: string | null
    personality_screenshot: string | null
    grades_screenshot: string | null
    student_card_screenshot: string | null
    created_at: Date | null
  }

  export type Peserta_2023MaxAggregateOutputType = {
    id: number | null
    name: string | null
    nim: string | null
    email_student: string | null
    birth_place: string | null
    birth_date: Date | null
    gender: string | null
    address: string | null
    phone_number: string | null
    line_id: string | null
    instagram_username: string | null
    tiktok_username: string | null
    major: string | null
    year: string | null
    sub_gpa: string | null
    gpa: string | null
    height: string | null
    weight: string | null
    clothes_size: string | null
    shoe_size: number | null
    pants_size: string | null
    about_me: string | null
    motivation: string | null
    personality: string | null
    talents: string | null
    achievements: string | null
    picture: string | null
    personality_screenshot: string | null
    grades_screenshot: string | null
    student_card_screenshot: string | null
    created_at: Date | null
  }

  export type Peserta_2023CountAggregateOutputType = {
    id: number
    name: number
    nim: number
    email_student: number
    birth_place: number
    birth_date: number
    gender: number
    address: number
    phone_number: number
    line_id: number
    instagram_username: number
    tiktok_username: number
    major: number
    year: number
    sub_gpa: number
    gpa: number
    height: number
    weight: number
    clothes_size: number
    shoe_size: number
    pants_size: number
    about_me: number
    motivation: number
    personality: number
    talents: number
    achievements: number
    picture: number
    personality_screenshot: number
    grades_screenshot: number
    student_card_screenshot: number
    created_at: number
    _all: number
  }


  export type Peserta_2023AvgAggregateInputType = {
    id?: true
    shoe_size?: true
  }

  export type Peserta_2023SumAggregateInputType = {
    id?: true
    shoe_size?: true
  }

  export type Peserta_2023MinAggregateInputType = {
    id?: true
    name?: true
    nim?: true
    email_student?: true
    birth_place?: true
    birth_date?: true
    gender?: true
    address?: true
    phone_number?: true
    line_id?: true
    instagram_username?: true
    tiktok_username?: true
    major?: true
    year?: true
    sub_gpa?: true
    gpa?: true
    height?: true
    weight?: true
    clothes_size?: true
    shoe_size?: true
    pants_size?: true
    about_me?: true
    motivation?: true
    personality?: true
    talents?: true
    achievements?: true
    picture?: true
    personality_screenshot?: true
    grades_screenshot?: true
    student_card_screenshot?: true
    created_at?: true
  }

  export type Peserta_2023MaxAggregateInputType = {
    id?: true
    name?: true
    nim?: true
    email_student?: true
    birth_place?: true
    birth_date?: true
    gender?: true
    address?: true
    phone_number?: true
    line_id?: true
    instagram_username?: true
    tiktok_username?: true
    major?: true
    year?: true
    sub_gpa?: true
    gpa?: true
    height?: true
    weight?: true
    clothes_size?: true
    shoe_size?: true
    pants_size?: true
    about_me?: true
    motivation?: true
    personality?: true
    talents?: true
    achievements?: true
    picture?: true
    personality_screenshot?: true
    grades_screenshot?: true
    student_card_screenshot?: true
    created_at?: true
  }

  export type Peserta_2023CountAggregateInputType = {
    id?: true
    name?: true
    nim?: true
    email_student?: true
    birth_place?: true
    birth_date?: true
    gender?: true
    address?: true
    phone_number?: true
    line_id?: true
    instagram_username?: true
    tiktok_username?: true
    major?: true
    year?: true
    sub_gpa?: true
    gpa?: true
    height?: true
    weight?: true
    clothes_size?: true
    shoe_size?: true
    pants_size?: true
    about_me?: true
    motivation?: true
    personality?: true
    talents?: true
    achievements?: true
    picture?: true
    personality_screenshot?: true
    grades_screenshot?: true
    student_card_screenshot?: true
    created_at?: true
    _all?: true
  }

  export type Peserta_2023AggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which peserta_2023 to aggregate.
     */
    where?: peserta_2023WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of peserta_2023s to fetch.
     */
    orderBy?: peserta_2023OrderByWithRelationInput | peserta_2023OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: peserta_2023WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` peserta_2023s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` peserta_2023s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned peserta_2023s
    **/
    _count?: true | Peserta_2023CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Peserta_2023AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Peserta_2023SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Peserta_2023MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Peserta_2023MaxAggregateInputType
  }

  export type GetPeserta_2023AggregateType<T extends Peserta_2023AggregateArgs> = {
        [P in keyof T & keyof AggregatePeserta_2023]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePeserta_2023[P]>
      : GetScalarType<T[P], AggregatePeserta_2023[P]>
  }




  export type peserta_2023GroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: peserta_2023WhereInput
    orderBy?: peserta_2023OrderByWithAggregationInput | peserta_2023OrderByWithAggregationInput[]
    by: Peserta_2023ScalarFieldEnum[] | Peserta_2023ScalarFieldEnum
    having?: peserta_2023ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Peserta_2023CountAggregateInputType | true
    _avg?: Peserta_2023AvgAggregateInputType
    _sum?: Peserta_2023SumAggregateInputType
    _min?: Peserta_2023MinAggregateInputType
    _max?: Peserta_2023MaxAggregateInputType
  }

  export type Peserta_2023GroupByOutputType = {
    id: number
    name: string
    nim: string
    email_student: string
    birth_place: string
    birth_date: Date
    gender: string
    address: string
    phone_number: string
    line_id: string
    instagram_username: string
    tiktok_username: string
    major: string
    year: string
    sub_gpa: string
    gpa: string
    height: string
    weight: string
    clothes_size: string
    shoe_size: number
    pants_size: string
    about_me: string
    motivation: string
    personality: string
    talents: string
    achievements: string
    picture: string
    personality_screenshot: string
    grades_screenshot: string
    student_card_screenshot: string
    created_at: Date
    _count: Peserta_2023CountAggregateOutputType | null
    _avg: Peserta_2023AvgAggregateOutputType | null
    _sum: Peserta_2023SumAggregateOutputType | null
    _min: Peserta_2023MinAggregateOutputType | null
    _max: Peserta_2023MaxAggregateOutputType | null
  }

  type GetPeserta_2023GroupByPayload<T extends peserta_2023GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Peserta_2023GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Peserta_2023GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Peserta_2023GroupByOutputType[P]>
            : GetScalarType<T[P], Peserta_2023GroupByOutputType[P]>
        }
      >
    >


  export type peserta_2023Select<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nim?: boolean
    email_student?: boolean
    birth_place?: boolean
    birth_date?: boolean
    gender?: boolean
    address?: boolean
    phone_number?: boolean
    line_id?: boolean
    instagram_username?: boolean
    tiktok_username?: boolean
    major?: boolean
    year?: boolean
    sub_gpa?: boolean
    gpa?: boolean
    height?: boolean
    weight?: boolean
    clothes_size?: boolean
    shoe_size?: boolean
    pants_size?: boolean
    about_me?: boolean
    motivation?: boolean
    personality?: boolean
    talents?: boolean
    achievements?: boolean
    picture?: boolean
    personality_screenshot?: boolean
    grades_screenshot?: boolean
    student_card_screenshot?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["peserta_2023"]>

  export type peserta_2023SelectScalar = {
    id?: boolean
    name?: boolean
    nim?: boolean
    email_student?: boolean
    birth_place?: boolean
    birth_date?: boolean
    gender?: boolean
    address?: boolean
    phone_number?: boolean
    line_id?: boolean
    instagram_username?: boolean
    tiktok_username?: boolean
    major?: boolean
    year?: boolean
    sub_gpa?: boolean
    gpa?: boolean
    height?: boolean
    weight?: boolean
    clothes_size?: boolean
    shoe_size?: boolean
    pants_size?: boolean
    about_me?: boolean
    motivation?: boolean
    personality?: boolean
    talents?: boolean
    achievements?: boolean
    picture?: boolean
    personality_screenshot?: boolean
    grades_screenshot?: boolean
    student_card_screenshot?: boolean
    created_at?: boolean
  }


  export type $peserta_2023Payload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "peserta_2023"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      nim: string
      email_student: string
      birth_place: string
      birth_date: Date
      gender: string
      address: string
      phone_number: string
      line_id: string
      instagram_username: string
      tiktok_username: string
      major: string
      year: string
      sub_gpa: string
      gpa: string
      height: string
      weight: string
      clothes_size: string
      shoe_size: number
      pants_size: string
      about_me: string
      motivation: string
      personality: string
      talents: string
      achievements: string
      picture: string
      personality_screenshot: string
      grades_screenshot: string
      student_card_screenshot: string
      created_at: Date
    }, ExtArgs["result"]["peserta_2023"]>
    composites: {}
  }


  type peserta_2023GetPayload<S extends boolean | null | undefined | peserta_2023DefaultArgs> = $Result.GetResult<Prisma.$peserta_2023Payload, S>

  type peserta_2023CountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<peserta_2023FindManyArgs, 'select' | 'include'> & {
      select?: Peserta_2023CountAggregateInputType | true
    }

  export interface peserta_2023Delegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['peserta_2023'], meta: { name: 'peserta_2023' } }
    /**
     * Find zero or one Peserta_2023 that matches the filter.
     * @param {peserta_2023FindUniqueArgs} args - Arguments to find a Peserta_2023
     * @example
     * // Get one Peserta_2023
     * const peserta_2023 = await prisma.peserta_2023.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends peserta_2023FindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, peserta_2023FindUniqueArgs<ExtArgs>>
    ): Prisma__peserta_2023Client<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Peserta_2023 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {peserta_2023FindUniqueOrThrowArgs} args - Arguments to find a Peserta_2023
     * @example
     * // Get one Peserta_2023
     * const peserta_2023 = await prisma.peserta_2023.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends peserta_2023FindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, peserta_2023FindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__peserta_2023Client<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Peserta_2023 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {peserta_2023FindFirstArgs} args - Arguments to find a Peserta_2023
     * @example
     * // Get one Peserta_2023
     * const peserta_2023 = await prisma.peserta_2023.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends peserta_2023FindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, peserta_2023FindFirstArgs<ExtArgs>>
    ): Prisma__peserta_2023Client<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Peserta_2023 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {peserta_2023FindFirstOrThrowArgs} args - Arguments to find a Peserta_2023
     * @example
     * // Get one Peserta_2023
     * const peserta_2023 = await prisma.peserta_2023.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends peserta_2023FindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, peserta_2023FindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__peserta_2023Client<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Peserta_2023s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {peserta_2023FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Peserta_2023s
     * const peserta_2023s = await prisma.peserta_2023.findMany()
     * 
     * // Get first 10 Peserta_2023s
     * const peserta_2023s = await prisma.peserta_2023.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const peserta_2023WithIdOnly = await prisma.peserta_2023.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends peserta_2023FindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, peserta_2023FindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Peserta_2023.
     * @param {peserta_2023CreateArgs} args - Arguments to create a Peserta_2023.
     * @example
     * // Create one Peserta_2023
     * const Peserta_2023 = await prisma.peserta_2023.create({
     *   data: {
     *     // ... data to create a Peserta_2023
     *   }
     * })
     * 
    **/
    create<T extends peserta_2023CreateArgs<ExtArgs>>(
      args: SelectSubset<T, peserta_2023CreateArgs<ExtArgs>>
    ): Prisma__peserta_2023Client<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Peserta_2023s.
     *     @param {peserta_2023CreateManyArgs} args - Arguments to create many Peserta_2023s.
     *     @example
     *     // Create many Peserta_2023s
     *     const peserta_2023 = await prisma.peserta_2023.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends peserta_2023CreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, peserta_2023CreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Peserta_2023.
     * @param {peserta_2023DeleteArgs} args - Arguments to delete one Peserta_2023.
     * @example
     * // Delete one Peserta_2023
     * const Peserta_2023 = await prisma.peserta_2023.delete({
     *   where: {
     *     // ... filter to delete one Peserta_2023
     *   }
     * })
     * 
    **/
    delete<T extends peserta_2023DeleteArgs<ExtArgs>>(
      args: SelectSubset<T, peserta_2023DeleteArgs<ExtArgs>>
    ): Prisma__peserta_2023Client<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Peserta_2023.
     * @param {peserta_2023UpdateArgs} args - Arguments to update one Peserta_2023.
     * @example
     * // Update one Peserta_2023
     * const peserta_2023 = await prisma.peserta_2023.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends peserta_2023UpdateArgs<ExtArgs>>(
      args: SelectSubset<T, peserta_2023UpdateArgs<ExtArgs>>
    ): Prisma__peserta_2023Client<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Peserta_2023s.
     * @param {peserta_2023DeleteManyArgs} args - Arguments to filter Peserta_2023s to delete.
     * @example
     * // Delete a few Peserta_2023s
     * const { count } = await prisma.peserta_2023.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends peserta_2023DeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, peserta_2023DeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Peserta_2023s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {peserta_2023UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Peserta_2023s
     * const peserta_2023 = await prisma.peserta_2023.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends peserta_2023UpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, peserta_2023UpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Peserta_2023.
     * @param {peserta_2023UpsertArgs} args - Arguments to update or create a Peserta_2023.
     * @example
     * // Update or create a Peserta_2023
     * const peserta_2023 = await prisma.peserta_2023.upsert({
     *   create: {
     *     // ... data to create a Peserta_2023
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Peserta_2023 we want to update
     *   }
     * })
    **/
    upsert<T extends peserta_2023UpsertArgs<ExtArgs>>(
      args: SelectSubset<T, peserta_2023UpsertArgs<ExtArgs>>
    ): Prisma__peserta_2023Client<$Result.GetResult<Prisma.$peserta_2023Payload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Peserta_2023s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {peserta_2023CountArgs} args - Arguments to filter Peserta_2023s to count.
     * @example
     * // Count the number of Peserta_2023s
     * const count = await prisma.peserta_2023.count({
     *   where: {
     *     // ... the filter for the Peserta_2023s we want to count
     *   }
     * })
    **/
    count<T extends peserta_2023CountArgs>(
      args?: Subset<T, peserta_2023CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Peserta_2023CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Peserta_2023.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Peserta_2023AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Peserta_2023AggregateArgs>(args: Subset<T, Peserta_2023AggregateArgs>): Prisma.PrismaPromise<GetPeserta_2023AggregateType<T>>

    /**
     * Group by Peserta_2023.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {peserta_2023GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends peserta_2023GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: peserta_2023GroupByArgs['orderBy'] }
        : { orderBy?: peserta_2023GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, peserta_2023GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPeserta_2023GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the peserta_2023 model
   */
  readonly fields: peserta_2023FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for peserta_2023.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__peserta_2023Client<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the peserta_2023 model
   */ 
  interface peserta_2023FieldRefs {
    readonly id: FieldRef<"peserta_2023", 'Int'>
    readonly name: FieldRef<"peserta_2023", 'String'>
    readonly nim: FieldRef<"peserta_2023", 'String'>
    readonly email_student: FieldRef<"peserta_2023", 'String'>
    readonly birth_place: FieldRef<"peserta_2023", 'String'>
    readonly birth_date: FieldRef<"peserta_2023", 'DateTime'>
    readonly gender: FieldRef<"peserta_2023", 'String'>
    readonly address: FieldRef<"peserta_2023", 'String'>
    readonly phone_number: FieldRef<"peserta_2023", 'String'>
    readonly line_id: FieldRef<"peserta_2023", 'String'>
    readonly instagram_username: FieldRef<"peserta_2023", 'String'>
    readonly tiktok_username: FieldRef<"peserta_2023", 'String'>
    readonly major: FieldRef<"peserta_2023", 'String'>
    readonly year: FieldRef<"peserta_2023", 'String'>
    readonly sub_gpa: FieldRef<"peserta_2023", 'String'>
    readonly gpa: FieldRef<"peserta_2023", 'String'>
    readonly height: FieldRef<"peserta_2023", 'String'>
    readonly weight: FieldRef<"peserta_2023", 'String'>
    readonly clothes_size: FieldRef<"peserta_2023", 'String'>
    readonly shoe_size: FieldRef<"peserta_2023", 'Int'>
    readonly pants_size: FieldRef<"peserta_2023", 'String'>
    readonly about_me: FieldRef<"peserta_2023", 'String'>
    readonly motivation: FieldRef<"peserta_2023", 'String'>
    readonly personality: FieldRef<"peserta_2023", 'String'>
    readonly talents: FieldRef<"peserta_2023", 'String'>
    readonly achievements: FieldRef<"peserta_2023", 'String'>
    readonly picture: FieldRef<"peserta_2023", 'String'>
    readonly personality_screenshot: FieldRef<"peserta_2023", 'String'>
    readonly grades_screenshot: FieldRef<"peserta_2023", 'String'>
    readonly student_card_screenshot: FieldRef<"peserta_2023", 'String'>
    readonly created_at: FieldRef<"peserta_2023", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * peserta_2023 findUnique
   */
  export type peserta_2023FindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * Filter, which peserta_2023 to fetch.
     */
    where: peserta_2023WhereUniqueInput
  }


  /**
   * peserta_2023 findUniqueOrThrow
   */
  export type peserta_2023FindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * Filter, which peserta_2023 to fetch.
     */
    where: peserta_2023WhereUniqueInput
  }


  /**
   * peserta_2023 findFirst
   */
  export type peserta_2023FindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * Filter, which peserta_2023 to fetch.
     */
    where?: peserta_2023WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of peserta_2023s to fetch.
     */
    orderBy?: peserta_2023OrderByWithRelationInput | peserta_2023OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for peserta_2023s.
     */
    cursor?: peserta_2023WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` peserta_2023s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` peserta_2023s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of peserta_2023s.
     */
    distinct?: Peserta_2023ScalarFieldEnum | Peserta_2023ScalarFieldEnum[]
  }


  /**
   * peserta_2023 findFirstOrThrow
   */
  export type peserta_2023FindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * Filter, which peserta_2023 to fetch.
     */
    where?: peserta_2023WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of peserta_2023s to fetch.
     */
    orderBy?: peserta_2023OrderByWithRelationInput | peserta_2023OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for peserta_2023s.
     */
    cursor?: peserta_2023WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` peserta_2023s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` peserta_2023s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of peserta_2023s.
     */
    distinct?: Peserta_2023ScalarFieldEnum | Peserta_2023ScalarFieldEnum[]
  }


  /**
   * peserta_2023 findMany
   */
  export type peserta_2023FindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * Filter, which peserta_2023s to fetch.
     */
    where?: peserta_2023WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of peserta_2023s to fetch.
     */
    orderBy?: peserta_2023OrderByWithRelationInput | peserta_2023OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing peserta_2023s.
     */
    cursor?: peserta_2023WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` peserta_2023s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` peserta_2023s.
     */
    skip?: number
    distinct?: Peserta_2023ScalarFieldEnum | Peserta_2023ScalarFieldEnum[]
  }


  /**
   * peserta_2023 create
   */
  export type peserta_2023CreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * The data needed to create a peserta_2023.
     */
    data: XOR<peserta_2023CreateInput, peserta_2023UncheckedCreateInput>
  }


  /**
   * peserta_2023 createMany
   */
  export type peserta_2023CreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many peserta_2023s.
     */
    data: peserta_2023CreateManyInput | peserta_2023CreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * peserta_2023 update
   */
  export type peserta_2023UpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * The data needed to update a peserta_2023.
     */
    data: XOR<peserta_2023UpdateInput, peserta_2023UncheckedUpdateInput>
    /**
     * Choose, which peserta_2023 to update.
     */
    where: peserta_2023WhereUniqueInput
  }


  /**
   * peserta_2023 updateMany
   */
  export type peserta_2023UpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update peserta_2023s.
     */
    data: XOR<peserta_2023UpdateManyMutationInput, peserta_2023UncheckedUpdateManyInput>
    /**
     * Filter which peserta_2023s to update
     */
    where?: peserta_2023WhereInput
  }


  /**
   * peserta_2023 upsert
   */
  export type peserta_2023UpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * The filter to search for the peserta_2023 to update in case it exists.
     */
    where: peserta_2023WhereUniqueInput
    /**
     * In case the peserta_2023 found by the `where` argument doesn't exist, create a new peserta_2023 with this data.
     */
    create: XOR<peserta_2023CreateInput, peserta_2023UncheckedCreateInput>
    /**
     * In case the peserta_2023 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<peserta_2023UpdateInput, peserta_2023UncheckedUpdateInput>
  }


  /**
   * peserta_2023 delete
   */
  export type peserta_2023DeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
    /**
     * Filter which peserta_2023 to delete.
     */
    where: peserta_2023WhereUniqueInput
  }


  /**
   * peserta_2023 deleteMany
   */
  export type peserta_2023DeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which peserta_2023s to delete
     */
    where?: peserta_2023WhereInput
  }


  /**
   * peserta_2023 without action
   */
  export type peserta_2023DefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the peserta_2023
     */
    select?: peserta_2023Select<ExtArgs> | null
  }



  /**
   * Model voting
   */

  export type AggregateVoting = {
    _count: VotingCountAggregateOutputType | null
    _avg: VotingAvgAggregateOutputType | null
    _sum: VotingSumAggregateOutputType | null
    _min: VotingMinAggregateOutputType | null
    _max: VotingMaxAggregateOutputType | null
  }

  export type VotingAvgAggregateOutputType = {
    Voters: number | null
  }

  export type VotingSumAggregateOutputType = {
    Voters: number | null
  }

  export type VotingMinAggregateOutputType = {
    NIM: string | null
    Voters: number | null
  }

  export type VotingMaxAggregateOutputType = {
    NIM: string | null
    Voters: number | null
  }

  export type VotingCountAggregateOutputType = {
    NIM: number
    Voters: number
    _all: number
  }


  export type VotingAvgAggregateInputType = {
    Voters?: true
  }

  export type VotingSumAggregateInputType = {
    Voters?: true
  }

  export type VotingMinAggregateInputType = {
    NIM?: true
    Voters?: true
  }

  export type VotingMaxAggregateInputType = {
    NIM?: true
    Voters?: true
  }

  export type VotingCountAggregateInputType = {
    NIM?: true
    Voters?: true
    _all?: true
  }

  export type VotingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which voting to aggregate.
     */
    where?: votingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votings to fetch.
     */
    orderBy?: votingOrderByWithRelationInput | votingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: votingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned votings
    **/
    _count?: true | VotingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VotingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VotingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VotingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VotingMaxAggregateInputType
  }

  export type GetVotingAggregateType<T extends VotingAggregateArgs> = {
        [P in keyof T & keyof AggregateVoting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoting[P]>
      : GetScalarType<T[P], AggregateVoting[P]>
  }




  export type votingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: votingWhereInput
    orderBy?: votingOrderByWithAggregationInput | votingOrderByWithAggregationInput[]
    by: VotingScalarFieldEnum[] | VotingScalarFieldEnum
    having?: votingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VotingCountAggregateInputType | true
    _avg?: VotingAvgAggregateInputType
    _sum?: VotingSumAggregateInputType
    _min?: VotingMinAggregateInputType
    _max?: VotingMaxAggregateInputType
  }

  export type VotingGroupByOutputType = {
    NIM: string
    Voters: number
    _count: VotingCountAggregateOutputType | null
    _avg: VotingAvgAggregateOutputType | null
    _sum: VotingSumAggregateOutputType | null
    _min: VotingMinAggregateOutputType | null
    _max: VotingMaxAggregateOutputType | null
  }

  type GetVotingGroupByPayload<T extends votingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VotingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VotingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VotingGroupByOutputType[P]>
            : GetScalarType<T[P], VotingGroupByOutputType[P]>
        }
      >
    >


  export type votingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    NIM?: boolean
    Voters?: boolean
  }, ExtArgs["result"]["voting"]>

  export type votingSelectScalar = {
    NIM?: boolean
    Voters?: boolean
  }


  export type $votingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "voting"
    objects: {}
    scalars: $Extensions.GetResult<{
      NIM: string
      Voters: number
    }, ExtArgs["result"]["voting"]>
    composites: {}
  }


  type votingGetPayload<S extends boolean | null | undefined | votingDefaultArgs> = $Result.GetResult<Prisma.$votingPayload, S>

  type votingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<votingFindManyArgs, 'select' | 'include'> & {
      select?: VotingCountAggregateInputType | true
    }

  export interface votingDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['voting'], meta: { name: 'voting' } }
    /**
     * Find zero or one Voting that matches the filter.
     * @param {votingFindUniqueArgs} args - Arguments to find a Voting
     * @example
     * // Get one Voting
     * const voting = await prisma.voting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends votingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, votingFindUniqueArgs<ExtArgs>>
    ): Prisma__votingClient<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Voting that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {votingFindUniqueOrThrowArgs} args - Arguments to find a Voting
     * @example
     * // Get one Voting
     * const voting = await prisma.voting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends votingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, votingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__votingClient<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Voting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votingFindFirstArgs} args - Arguments to find a Voting
     * @example
     * // Get one Voting
     * const voting = await prisma.voting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends votingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, votingFindFirstArgs<ExtArgs>>
    ): Prisma__votingClient<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Voting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votingFindFirstOrThrowArgs} args - Arguments to find a Voting
     * @example
     * // Get one Voting
     * const voting = await prisma.voting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends votingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, votingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__votingClient<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Votings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votings
     * const votings = await prisma.voting.findMany()
     * 
     * // Get first 10 Votings
     * const votings = await prisma.voting.findMany({ take: 10 })
     * 
     * // Only select the `NIM`
     * const votingWithNIMOnly = await prisma.voting.findMany({ select: { NIM: true } })
     * 
    **/
    findMany<T extends votingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, votingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Voting.
     * @param {votingCreateArgs} args - Arguments to create a Voting.
     * @example
     * // Create one Voting
     * const Voting = await prisma.voting.create({
     *   data: {
     *     // ... data to create a Voting
     *   }
     * })
     * 
    **/
    create<T extends votingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, votingCreateArgs<ExtArgs>>
    ): Prisma__votingClient<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Votings.
     *     @param {votingCreateManyArgs} args - Arguments to create many Votings.
     *     @example
     *     // Create many Votings
     *     const voting = await prisma.voting.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends votingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, votingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Voting.
     * @param {votingDeleteArgs} args - Arguments to delete one Voting.
     * @example
     * // Delete one Voting
     * const Voting = await prisma.voting.delete({
     *   where: {
     *     // ... filter to delete one Voting
     *   }
     * })
     * 
    **/
    delete<T extends votingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, votingDeleteArgs<ExtArgs>>
    ): Prisma__votingClient<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Voting.
     * @param {votingUpdateArgs} args - Arguments to update one Voting.
     * @example
     * // Update one Voting
     * const voting = await prisma.voting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends votingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, votingUpdateArgs<ExtArgs>>
    ): Prisma__votingClient<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Votings.
     * @param {votingDeleteManyArgs} args - Arguments to filter Votings to delete.
     * @example
     * // Delete a few Votings
     * const { count } = await prisma.voting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends votingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, votingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votings
     * const voting = await prisma.voting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends votingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, votingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Voting.
     * @param {votingUpsertArgs} args - Arguments to update or create a Voting.
     * @example
     * // Update or create a Voting
     * const voting = await prisma.voting.upsert({
     *   create: {
     *     // ... data to create a Voting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Voting we want to update
     *   }
     * })
    **/
    upsert<T extends votingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, votingUpsertArgs<ExtArgs>>
    ): Prisma__votingClient<$Result.GetResult<Prisma.$votingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Votings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votingCountArgs} args - Arguments to filter Votings to count.
     * @example
     * // Count the number of Votings
     * const count = await prisma.voting.count({
     *   where: {
     *     // ... the filter for the Votings we want to count
     *   }
     * })
    **/
    count<T extends votingCountArgs>(
      args?: Subset<T, votingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VotingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Voting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VotingAggregateArgs>(args: Subset<T, VotingAggregateArgs>): Prisma.PrismaPromise<GetVotingAggregateType<T>>

    /**
     * Group by Voting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends votingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: votingGroupByArgs['orderBy'] }
        : { orderBy?: votingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, votingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVotingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the voting model
   */
  readonly fields: votingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for voting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__votingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the voting model
   */ 
  interface votingFieldRefs {
    readonly NIM: FieldRef<"voting", 'String'>
    readonly Voters: FieldRef<"voting", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * voting findUnique
   */
  export type votingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * Filter, which voting to fetch.
     */
    where: votingWhereUniqueInput
  }


  /**
   * voting findUniqueOrThrow
   */
  export type votingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * Filter, which voting to fetch.
     */
    where: votingWhereUniqueInput
  }


  /**
   * voting findFirst
   */
  export type votingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * Filter, which voting to fetch.
     */
    where?: votingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votings to fetch.
     */
    orderBy?: votingOrderByWithRelationInput | votingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for votings.
     */
    cursor?: votingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of votings.
     */
    distinct?: VotingScalarFieldEnum | VotingScalarFieldEnum[]
  }


  /**
   * voting findFirstOrThrow
   */
  export type votingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * Filter, which voting to fetch.
     */
    where?: votingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votings to fetch.
     */
    orderBy?: votingOrderByWithRelationInput | votingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for votings.
     */
    cursor?: votingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of votings.
     */
    distinct?: VotingScalarFieldEnum | VotingScalarFieldEnum[]
  }


  /**
   * voting findMany
   */
  export type votingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * Filter, which votings to fetch.
     */
    where?: votingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votings to fetch.
     */
    orderBy?: votingOrderByWithRelationInput | votingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing votings.
     */
    cursor?: votingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votings.
     */
    skip?: number
    distinct?: VotingScalarFieldEnum | VotingScalarFieldEnum[]
  }


  /**
   * voting create
   */
  export type votingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * The data needed to create a voting.
     */
    data: XOR<votingCreateInput, votingUncheckedCreateInput>
  }


  /**
   * voting createMany
   */
  export type votingCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many votings.
     */
    data: votingCreateManyInput | votingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * voting update
   */
  export type votingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * The data needed to update a voting.
     */
    data: XOR<votingUpdateInput, votingUncheckedUpdateInput>
    /**
     * Choose, which voting to update.
     */
    where: votingWhereUniqueInput
  }


  /**
   * voting updateMany
   */
  export type votingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update votings.
     */
    data: XOR<votingUpdateManyMutationInput, votingUncheckedUpdateManyInput>
    /**
     * Filter which votings to update
     */
    where?: votingWhereInput
  }


  /**
   * voting upsert
   */
  export type votingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * The filter to search for the voting to update in case it exists.
     */
    where: votingWhereUniqueInput
    /**
     * In case the voting found by the `where` argument doesn't exist, create a new voting with this data.
     */
    create: XOR<votingCreateInput, votingUncheckedCreateInput>
    /**
     * In case the voting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<votingUpdateInput, votingUncheckedUpdateInput>
  }


  /**
   * voting delete
   */
  export type votingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
    /**
     * Filter which voting to delete.
     */
    where: votingWhereUniqueInput
  }


  /**
   * voting deleteMany
   */
  export type votingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which votings to delete
     */
    where?: votingWhereInput
  }


  /**
   * voting without action
   */
  export type votingDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voting
     */
    select?: votingSelect<ExtArgs> | null
  }



  /**
   * Model sponsor_medpar
   */

  export type AggregateSponsor_medpar = {
    _count: Sponsor_medparCountAggregateOutputType | null
    _avg: Sponsor_medparAvgAggregateOutputType | null
    _sum: Sponsor_medparSumAggregateOutputType | null
    _min: Sponsor_medparMinAggregateOutputType | null
    _max: Sponsor_medparMaxAggregateOutputType | null
  }

  export type Sponsor_medparAvgAggregateOutputType = {
    type: number | null
  }

  export type Sponsor_medparSumAggregateOutputType = {
    type: number | null
  }

  export type Sponsor_medparMinAggregateOutputType = {
    Sponsor_MedparID: string | null
    type: number | null
    src: string | null
    nama: string | null
    url: string | null
    bg: boolean | null
  }

  export type Sponsor_medparMaxAggregateOutputType = {
    Sponsor_MedparID: string | null
    type: number | null
    src: string | null
    nama: string | null
    url: string | null
    bg: boolean | null
  }

  export type Sponsor_medparCountAggregateOutputType = {
    Sponsor_MedparID: number
    type: number
    src: number
    nama: number
    url: number
    bg: number
    _all: number
  }


  export type Sponsor_medparAvgAggregateInputType = {
    type?: true
  }

  export type Sponsor_medparSumAggregateInputType = {
    type?: true
  }

  export type Sponsor_medparMinAggregateInputType = {
    Sponsor_MedparID?: true
    type?: true
    src?: true
    nama?: true
    url?: true
    bg?: true
  }

  export type Sponsor_medparMaxAggregateInputType = {
    Sponsor_MedparID?: true
    type?: true
    src?: true
    nama?: true
    url?: true
    bg?: true
  }

  export type Sponsor_medparCountAggregateInputType = {
    Sponsor_MedparID?: true
    type?: true
    src?: true
    nama?: true
    url?: true
    bg?: true
    _all?: true
  }

  export type Sponsor_medparAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sponsor_medpar to aggregate.
     */
    where?: sponsor_medparWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sponsor_medpars to fetch.
     */
    orderBy?: sponsor_medparOrderByWithRelationInput | sponsor_medparOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sponsor_medparWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sponsor_medpars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sponsor_medpars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sponsor_medpars
    **/
    _count?: true | Sponsor_medparCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Sponsor_medparAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Sponsor_medparSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Sponsor_medparMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Sponsor_medparMaxAggregateInputType
  }

  export type GetSponsor_medparAggregateType<T extends Sponsor_medparAggregateArgs> = {
        [P in keyof T & keyof AggregateSponsor_medpar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSponsor_medpar[P]>
      : GetScalarType<T[P], AggregateSponsor_medpar[P]>
  }




  export type sponsor_medparGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sponsor_medparWhereInput
    orderBy?: sponsor_medparOrderByWithAggregationInput | sponsor_medparOrderByWithAggregationInput[]
    by: Sponsor_medparScalarFieldEnum[] | Sponsor_medparScalarFieldEnum
    having?: sponsor_medparScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Sponsor_medparCountAggregateInputType | true
    _avg?: Sponsor_medparAvgAggregateInputType
    _sum?: Sponsor_medparSumAggregateInputType
    _min?: Sponsor_medparMinAggregateInputType
    _max?: Sponsor_medparMaxAggregateInputType
  }

  export type Sponsor_medparGroupByOutputType = {
    Sponsor_MedparID: string
    type: number
    src: string
    nama: string | null
    url: string | null
    bg: boolean
    _count: Sponsor_medparCountAggregateOutputType | null
    _avg: Sponsor_medparAvgAggregateOutputType | null
    _sum: Sponsor_medparSumAggregateOutputType | null
    _min: Sponsor_medparMinAggregateOutputType | null
    _max: Sponsor_medparMaxAggregateOutputType | null
  }

  type GetSponsor_medparGroupByPayload<T extends sponsor_medparGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Sponsor_medparGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Sponsor_medparGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Sponsor_medparGroupByOutputType[P]>
            : GetScalarType<T[P], Sponsor_medparGroupByOutputType[P]>
        }
      >
    >


  export type sponsor_medparSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Sponsor_MedparID?: boolean
    type?: boolean
    src?: boolean
    nama?: boolean
    url?: boolean
    bg?: boolean
  }, ExtArgs["result"]["sponsor_medpar"]>

  export type sponsor_medparSelectScalar = {
    Sponsor_MedparID?: boolean
    type?: boolean
    src?: boolean
    nama?: boolean
    url?: boolean
    bg?: boolean
  }


  export type $sponsor_medparPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "sponsor_medpar"
    objects: {}
    scalars: $Extensions.GetResult<{
      Sponsor_MedparID: string
      type: number
      src: string
      nama: string | null
      url: string | null
      bg: boolean
    }, ExtArgs["result"]["sponsor_medpar"]>
    composites: {}
  }


  type sponsor_medparGetPayload<S extends boolean | null | undefined | sponsor_medparDefaultArgs> = $Result.GetResult<Prisma.$sponsor_medparPayload, S>

  type sponsor_medparCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<sponsor_medparFindManyArgs, 'select' | 'include'> & {
      select?: Sponsor_medparCountAggregateInputType | true
    }

  export interface sponsor_medparDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sponsor_medpar'], meta: { name: 'sponsor_medpar' } }
    /**
     * Find zero or one Sponsor_medpar that matches the filter.
     * @param {sponsor_medparFindUniqueArgs} args - Arguments to find a Sponsor_medpar
     * @example
     * // Get one Sponsor_medpar
     * const sponsor_medpar = await prisma.sponsor_medpar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sponsor_medparFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sponsor_medparFindUniqueArgs<ExtArgs>>
    ): Prisma__sponsor_medparClient<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sponsor_medpar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sponsor_medparFindUniqueOrThrowArgs} args - Arguments to find a Sponsor_medpar
     * @example
     * // Get one Sponsor_medpar
     * const sponsor_medpar = await prisma.sponsor_medpar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sponsor_medparFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sponsor_medparFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sponsor_medparClient<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sponsor_medpar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sponsor_medparFindFirstArgs} args - Arguments to find a Sponsor_medpar
     * @example
     * // Get one Sponsor_medpar
     * const sponsor_medpar = await prisma.sponsor_medpar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sponsor_medparFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sponsor_medparFindFirstArgs<ExtArgs>>
    ): Prisma__sponsor_medparClient<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sponsor_medpar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sponsor_medparFindFirstOrThrowArgs} args - Arguments to find a Sponsor_medpar
     * @example
     * // Get one Sponsor_medpar
     * const sponsor_medpar = await prisma.sponsor_medpar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sponsor_medparFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sponsor_medparFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sponsor_medparClient<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sponsor_medpars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sponsor_medparFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sponsor_medpars
     * const sponsor_medpars = await prisma.sponsor_medpar.findMany()
     * 
     * // Get first 10 Sponsor_medpars
     * const sponsor_medpars = await prisma.sponsor_medpar.findMany({ take: 10 })
     * 
     * // Only select the `Sponsor_MedparID`
     * const sponsor_medparWithSponsor_MedparIDOnly = await prisma.sponsor_medpar.findMany({ select: { Sponsor_MedparID: true } })
     * 
    **/
    findMany<T extends sponsor_medparFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sponsor_medparFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sponsor_medpar.
     * @param {sponsor_medparCreateArgs} args - Arguments to create a Sponsor_medpar.
     * @example
     * // Create one Sponsor_medpar
     * const Sponsor_medpar = await prisma.sponsor_medpar.create({
     *   data: {
     *     // ... data to create a Sponsor_medpar
     *   }
     * })
     * 
    **/
    create<T extends sponsor_medparCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sponsor_medparCreateArgs<ExtArgs>>
    ): Prisma__sponsor_medparClient<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sponsor_medpars.
     *     @param {sponsor_medparCreateManyArgs} args - Arguments to create many Sponsor_medpars.
     *     @example
     *     // Create many Sponsor_medpars
     *     const sponsor_medpar = await prisma.sponsor_medpar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sponsor_medparCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sponsor_medparCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sponsor_medpar.
     * @param {sponsor_medparDeleteArgs} args - Arguments to delete one Sponsor_medpar.
     * @example
     * // Delete one Sponsor_medpar
     * const Sponsor_medpar = await prisma.sponsor_medpar.delete({
     *   where: {
     *     // ... filter to delete one Sponsor_medpar
     *   }
     * })
     * 
    **/
    delete<T extends sponsor_medparDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sponsor_medparDeleteArgs<ExtArgs>>
    ): Prisma__sponsor_medparClient<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sponsor_medpar.
     * @param {sponsor_medparUpdateArgs} args - Arguments to update one Sponsor_medpar.
     * @example
     * // Update one Sponsor_medpar
     * const sponsor_medpar = await prisma.sponsor_medpar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sponsor_medparUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sponsor_medparUpdateArgs<ExtArgs>>
    ): Prisma__sponsor_medparClient<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sponsor_medpars.
     * @param {sponsor_medparDeleteManyArgs} args - Arguments to filter Sponsor_medpars to delete.
     * @example
     * // Delete a few Sponsor_medpars
     * const { count } = await prisma.sponsor_medpar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sponsor_medparDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sponsor_medparDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sponsor_medpars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sponsor_medparUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sponsor_medpars
     * const sponsor_medpar = await prisma.sponsor_medpar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sponsor_medparUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sponsor_medparUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sponsor_medpar.
     * @param {sponsor_medparUpsertArgs} args - Arguments to update or create a Sponsor_medpar.
     * @example
     * // Update or create a Sponsor_medpar
     * const sponsor_medpar = await prisma.sponsor_medpar.upsert({
     *   create: {
     *     // ... data to create a Sponsor_medpar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sponsor_medpar we want to update
     *   }
     * })
    **/
    upsert<T extends sponsor_medparUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sponsor_medparUpsertArgs<ExtArgs>>
    ): Prisma__sponsor_medparClient<$Result.GetResult<Prisma.$sponsor_medparPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sponsor_medpars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sponsor_medparCountArgs} args - Arguments to filter Sponsor_medpars to count.
     * @example
     * // Count the number of Sponsor_medpars
     * const count = await prisma.sponsor_medpar.count({
     *   where: {
     *     // ... the filter for the Sponsor_medpars we want to count
     *   }
     * })
    **/
    count<T extends sponsor_medparCountArgs>(
      args?: Subset<T, sponsor_medparCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Sponsor_medparCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sponsor_medpar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sponsor_medparAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Sponsor_medparAggregateArgs>(args: Subset<T, Sponsor_medparAggregateArgs>): Prisma.PrismaPromise<GetSponsor_medparAggregateType<T>>

    /**
     * Group by Sponsor_medpar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sponsor_medparGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sponsor_medparGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sponsor_medparGroupByArgs['orderBy'] }
        : { orderBy?: sponsor_medparGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sponsor_medparGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSponsor_medparGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sponsor_medpar model
   */
  readonly fields: sponsor_medparFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sponsor_medpar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sponsor_medparClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the sponsor_medpar model
   */ 
  interface sponsor_medparFieldRefs {
    readonly Sponsor_MedparID: FieldRef<"sponsor_medpar", 'String'>
    readonly type: FieldRef<"sponsor_medpar", 'Int'>
    readonly src: FieldRef<"sponsor_medpar", 'String'>
    readonly nama: FieldRef<"sponsor_medpar", 'String'>
    readonly url: FieldRef<"sponsor_medpar", 'String'>
    readonly bg: FieldRef<"sponsor_medpar", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * sponsor_medpar findUnique
   */
  export type sponsor_medparFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * Filter, which sponsor_medpar to fetch.
     */
    where: sponsor_medparWhereUniqueInput
  }


  /**
   * sponsor_medpar findUniqueOrThrow
   */
  export type sponsor_medparFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * Filter, which sponsor_medpar to fetch.
     */
    where: sponsor_medparWhereUniqueInput
  }


  /**
   * sponsor_medpar findFirst
   */
  export type sponsor_medparFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * Filter, which sponsor_medpar to fetch.
     */
    where?: sponsor_medparWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sponsor_medpars to fetch.
     */
    orderBy?: sponsor_medparOrderByWithRelationInput | sponsor_medparOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sponsor_medpars.
     */
    cursor?: sponsor_medparWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sponsor_medpars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sponsor_medpars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sponsor_medpars.
     */
    distinct?: Sponsor_medparScalarFieldEnum | Sponsor_medparScalarFieldEnum[]
  }


  /**
   * sponsor_medpar findFirstOrThrow
   */
  export type sponsor_medparFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * Filter, which sponsor_medpar to fetch.
     */
    where?: sponsor_medparWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sponsor_medpars to fetch.
     */
    orderBy?: sponsor_medparOrderByWithRelationInput | sponsor_medparOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sponsor_medpars.
     */
    cursor?: sponsor_medparWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sponsor_medpars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sponsor_medpars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sponsor_medpars.
     */
    distinct?: Sponsor_medparScalarFieldEnum | Sponsor_medparScalarFieldEnum[]
  }


  /**
   * sponsor_medpar findMany
   */
  export type sponsor_medparFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * Filter, which sponsor_medpars to fetch.
     */
    where?: sponsor_medparWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sponsor_medpars to fetch.
     */
    orderBy?: sponsor_medparOrderByWithRelationInput | sponsor_medparOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sponsor_medpars.
     */
    cursor?: sponsor_medparWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sponsor_medpars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sponsor_medpars.
     */
    skip?: number
    distinct?: Sponsor_medparScalarFieldEnum | Sponsor_medparScalarFieldEnum[]
  }


  /**
   * sponsor_medpar create
   */
  export type sponsor_medparCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * The data needed to create a sponsor_medpar.
     */
    data: XOR<sponsor_medparCreateInput, sponsor_medparUncheckedCreateInput>
  }


  /**
   * sponsor_medpar createMany
   */
  export type sponsor_medparCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sponsor_medpars.
     */
    data: sponsor_medparCreateManyInput | sponsor_medparCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * sponsor_medpar update
   */
  export type sponsor_medparUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * The data needed to update a sponsor_medpar.
     */
    data: XOR<sponsor_medparUpdateInput, sponsor_medparUncheckedUpdateInput>
    /**
     * Choose, which sponsor_medpar to update.
     */
    where: sponsor_medparWhereUniqueInput
  }


  /**
   * sponsor_medpar updateMany
   */
  export type sponsor_medparUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sponsor_medpars.
     */
    data: XOR<sponsor_medparUpdateManyMutationInput, sponsor_medparUncheckedUpdateManyInput>
    /**
     * Filter which sponsor_medpars to update
     */
    where?: sponsor_medparWhereInput
  }


  /**
   * sponsor_medpar upsert
   */
  export type sponsor_medparUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * The filter to search for the sponsor_medpar to update in case it exists.
     */
    where: sponsor_medparWhereUniqueInput
    /**
     * In case the sponsor_medpar found by the `where` argument doesn't exist, create a new sponsor_medpar with this data.
     */
    create: XOR<sponsor_medparCreateInput, sponsor_medparUncheckedCreateInput>
    /**
     * In case the sponsor_medpar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sponsor_medparUpdateInput, sponsor_medparUncheckedUpdateInput>
  }


  /**
   * sponsor_medpar delete
   */
  export type sponsor_medparDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
    /**
     * Filter which sponsor_medpar to delete.
     */
    where: sponsor_medparWhereUniqueInput
  }


  /**
   * sponsor_medpar deleteMany
   */
  export type sponsor_medparDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sponsor_medpars to delete
     */
    where?: sponsor_medparWhereInput
  }


  /**
   * sponsor_medpar without action
   */
  export type sponsor_medparDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sponsor_medpar
     */
    select?: sponsor_medparSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AwardingScalarFieldEnum: {
    Name: 'Name',
    Email: 'Email',
    PhoneNumber: 'PhoneNumber',
    TransactionProof: 'TransactionProof',
    Origin: 'Origin',
    TransactionDate: 'TransactionDate'
  };

  export type AwardingScalarFieldEnum = (typeof AwardingScalarFieldEnum)[keyof typeof AwardingScalarFieldEnum]


  export const Ci_sessionsScalarFieldEnum: {
    id: 'id',
    ip_address: 'ip_address',
    timestamp: 'timestamp',
    data: 'data'
  };

  export type Ci_sessionsScalarFieldEnum = (typeof Ci_sessionsScalarFieldEnum)[keyof typeof Ci_sessionsScalarFieldEnum]


  export const Finalis2022ScalarFieldEnum: {
    Name: 'Name',
    Major: 'Major',
    Year: 'Year',
    Tagline: 'Tagline',
    Photo: 'Photo',
    id: 'id'
  };

  export type Finalis2022ScalarFieldEnum = (typeof Finalis2022ScalarFieldEnum)[keyof typeof Finalis2022ScalarFieldEnum]


  export const MetanoiaScalarFieldEnum: {
    Name: 'Name',
    Email: 'Email',
    PhoneNumber: 'PhoneNumber',
    TransactionProof: 'TransactionProof',
    Origin: 'Origin',
    TransactionDate: 'TransactionDate'
  };

  export type MetanoiaScalarFieldEnum = (typeof MetanoiaScalarFieldEnum)[keyof typeof MetanoiaScalarFieldEnum]


  export const PesertaScalarFieldEnum: {
    Name: 'Name',
    StudentID: 'StudentID',
    Email: 'Email',
    gender: 'gender',
    BirthDate: 'BirthDate',
    BirthPlace: 'BirthPlace',
    Address: 'Address',
    PhoneNumber: 'PhoneNumber',
    LineID: 'LineID',
    IGUsername: 'IGUsername',
    Major: 'Major',
    Year: 'Year',
    GPA: 'GPA',
    gpaPict: 'gpaPict',
    Height: 'Height',
    Weight: 'Weight',
    clothesSize: 'clothesSize',
    pantsSize: 'pantsSize',
    shoeSize: 'shoeSize',
    AboutMe: 'AboutMe',
    Motivation: 'Motivation',
    Talents: 'Talents',
    OrganizationExperience: 'OrganizationExperience',
    Achievements: 'Achievements',
    RoleModelCharacter: 'RoleModelCharacter',
    picture: 'picture',
    personality: 'personality',
    essai: 'essai',
    Status: 'Status',
    QuestionType: 'QuestionType'
  };

  export type PesertaScalarFieldEnum = (typeof PesertaScalarFieldEnum)[keyof typeof PesertaScalarFieldEnum]


  export const Peserta_2023ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nim: 'nim',
    email_student: 'email_student',
    birth_place: 'birth_place',
    birth_date: 'birth_date',
    gender: 'gender',
    address: 'address',
    phone_number: 'phone_number',
    line_id: 'line_id',
    instagram_username: 'instagram_username',
    tiktok_username: 'tiktok_username',
    major: 'major',
    year: 'year',
    sub_gpa: 'sub_gpa',
    gpa: 'gpa',
    height: 'height',
    weight: 'weight',
    clothes_size: 'clothes_size',
    shoe_size: 'shoe_size',
    pants_size: 'pants_size',
    about_me: 'about_me',
    motivation: 'motivation',
    personality: 'personality',
    talents: 'talents',
    achievements: 'achievements',
    picture: 'picture',
    personality_screenshot: 'personality_screenshot',
    grades_screenshot: 'grades_screenshot',
    student_card_screenshot: 'student_card_screenshot',
    created_at: 'created_at'
  };

  export type Peserta_2023ScalarFieldEnum = (typeof Peserta_2023ScalarFieldEnum)[keyof typeof Peserta_2023ScalarFieldEnum]


  export const VotingScalarFieldEnum: {
    NIM: 'NIM',
    Voters: 'Voters'
  };

  export type VotingScalarFieldEnum = (typeof VotingScalarFieldEnum)[keyof typeof VotingScalarFieldEnum]


  export const Sponsor_medparScalarFieldEnum: {
    Sponsor_MedparID: 'Sponsor_MedparID',
    type: 'type',
    src: 'src',
    nama: 'nama',
    url: 'url',
    bg: 'bg'
  };

  export type Sponsor_medparScalarFieldEnum = (typeof Sponsor_medparScalarFieldEnum)[keyof typeof Sponsor_medparScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: StringFilter<"user"> | string
    username?: StringNullableFilter<"user"> | string | null
    email?: StringNullableFilter<"user"> | string | null
    password?: StringFilter<"user"> | string
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    username?: StringNullableFilter<"user"> | string | null
    password?: StringFilter<"user"> | string
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user"> | string
    username?: StringNullableWithAggregatesFilter<"user"> | string | null
    email?: StringNullableWithAggregatesFilter<"user"> | string | null
    password?: StringWithAggregatesFilter<"user"> | string
  }

  export type awardingWhereInput = {
    AND?: awardingWhereInput | awardingWhereInput[]
    OR?: awardingWhereInput[]
    NOT?: awardingWhereInput | awardingWhereInput[]
    Name?: StringFilter<"awarding"> | string
    Email?: StringFilter<"awarding"> | string
    PhoneNumber?: StringFilter<"awarding"> | string
    TransactionProof?: StringFilter<"awarding"> | string
    Origin?: StringFilter<"awarding"> | string
    TransactionDate?: StringFilter<"awarding"> | string
  }

  export type awardingOrderByWithRelationInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
  }

  export type awardingWhereUniqueInput = Prisma.AtLeast<{
    Email?: string
    AND?: awardingWhereInput | awardingWhereInput[]
    OR?: awardingWhereInput[]
    NOT?: awardingWhereInput | awardingWhereInput[]
    Name?: StringFilter<"awarding"> | string
    PhoneNumber?: StringFilter<"awarding"> | string
    TransactionProof?: StringFilter<"awarding"> | string
    Origin?: StringFilter<"awarding"> | string
    TransactionDate?: StringFilter<"awarding"> | string
  }, "Email">

  export type awardingOrderByWithAggregationInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
    _count?: awardingCountOrderByAggregateInput
    _max?: awardingMaxOrderByAggregateInput
    _min?: awardingMinOrderByAggregateInput
  }

  export type awardingScalarWhereWithAggregatesInput = {
    AND?: awardingScalarWhereWithAggregatesInput | awardingScalarWhereWithAggregatesInput[]
    OR?: awardingScalarWhereWithAggregatesInput[]
    NOT?: awardingScalarWhereWithAggregatesInput | awardingScalarWhereWithAggregatesInput[]
    Name?: StringWithAggregatesFilter<"awarding"> | string
    Email?: StringWithAggregatesFilter<"awarding"> | string
    PhoneNumber?: StringWithAggregatesFilter<"awarding"> | string
    TransactionProof?: StringWithAggregatesFilter<"awarding"> | string
    Origin?: StringWithAggregatesFilter<"awarding"> | string
    TransactionDate?: StringWithAggregatesFilter<"awarding"> | string
  }

  export type ci_sessionsWhereInput = {
    AND?: ci_sessionsWhereInput | ci_sessionsWhereInput[]
    OR?: ci_sessionsWhereInput[]
    NOT?: ci_sessionsWhereInput | ci_sessionsWhereInput[]
    id?: StringFilter<"ci_sessions"> | string
    ip_address?: StringFilter<"ci_sessions"> | string
    timestamp?: IntFilter<"ci_sessions"> | number
    data?: BytesFilter<"ci_sessions"> | Buffer
  }

  export type ci_sessionsOrderByWithRelationInput = {
    id?: SortOrder
    ip_address?: SortOrder
    timestamp?: SortOrder
    data?: SortOrder
  }

  export type ci_sessionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ci_sessionsWhereInput | ci_sessionsWhereInput[]
    OR?: ci_sessionsWhereInput[]
    NOT?: ci_sessionsWhereInput | ci_sessionsWhereInput[]
    ip_address?: StringFilter<"ci_sessions"> | string
    timestamp?: IntFilter<"ci_sessions"> | number
    data?: BytesFilter<"ci_sessions"> | Buffer
  }, "id">

  export type ci_sessionsOrderByWithAggregationInput = {
    id?: SortOrder
    ip_address?: SortOrder
    timestamp?: SortOrder
    data?: SortOrder
    _count?: ci_sessionsCountOrderByAggregateInput
    _avg?: ci_sessionsAvgOrderByAggregateInput
    _max?: ci_sessionsMaxOrderByAggregateInput
    _min?: ci_sessionsMinOrderByAggregateInput
    _sum?: ci_sessionsSumOrderByAggregateInput
  }

  export type ci_sessionsScalarWhereWithAggregatesInput = {
    AND?: ci_sessionsScalarWhereWithAggregatesInput | ci_sessionsScalarWhereWithAggregatesInput[]
    OR?: ci_sessionsScalarWhereWithAggregatesInput[]
    NOT?: ci_sessionsScalarWhereWithAggregatesInput | ci_sessionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ci_sessions"> | string
    ip_address?: StringWithAggregatesFilter<"ci_sessions"> | string
    timestamp?: IntWithAggregatesFilter<"ci_sessions"> | number
    data?: BytesWithAggregatesFilter<"ci_sessions"> | Buffer
  }

  export type finalis2022WhereInput = {
    AND?: finalis2022WhereInput | finalis2022WhereInput[]
    OR?: finalis2022WhereInput[]
    NOT?: finalis2022WhereInput | finalis2022WhereInput[]
    Name?: StringFilter<"finalis2022"> | string
    Major?: StringFilter<"finalis2022"> | string
    Year?: IntFilter<"finalis2022"> | number
    Tagline?: StringFilter<"finalis2022"> | string
    Photo?: StringFilter<"finalis2022"> | string
    id?: IntFilter<"finalis2022"> | number
  }

  export type finalis2022OrderByWithRelationInput = {
    Name?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    Tagline?: SortOrder
    Photo?: SortOrder
    id?: SortOrder
  }

  export type finalis2022WhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: finalis2022WhereInput | finalis2022WhereInput[]
    OR?: finalis2022WhereInput[]
    NOT?: finalis2022WhereInput | finalis2022WhereInput[]
    Name?: StringFilter<"finalis2022"> | string
    Major?: StringFilter<"finalis2022"> | string
    Year?: IntFilter<"finalis2022"> | number
    Tagline?: StringFilter<"finalis2022"> | string
    Photo?: StringFilter<"finalis2022"> | string
  }, "id">

  export type finalis2022OrderByWithAggregationInput = {
    Name?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    Tagline?: SortOrder
    Photo?: SortOrder
    id?: SortOrder
    _count?: finalis2022CountOrderByAggregateInput
    _avg?: finalis2022AvgOrderByAggregateInput
    _max?: finalis2022MaxOrderByAggregateInput
    _min?: finalis2022MinOrderByAggregateInput
    _sum?: finalis2022SumOrderByAggregateInput
  }

  export type finalis2022ScalarWhereWithAggregatesInput = {
    AND?: finalis2022ScalarWhereWithAggregatesInput | finalis2022ScalarWhereWithAggregatesInput[]
    OR?: finalis2022ScalarWhereWithAggregatesInput[]
    NOT?: finalis2022ScalarWhereWithAggregatesInput | finalis2022ScalarWhereWithAggregatesInput[]
    Name?: StringWithAggregatesFilter<"finalis2022"> | string
    Major?: StringWithAggregatesFilter<"finalis2022"> | string
    Year?: IntWithAggregatesFilter<"finalis2022"> | number
    Tagline?: StringWithAggregatesFilter<"finalis2022"> | string
    Photo?: StringWithAggregatesFilter<"finalis2022"> | string
    id?: IntWithAggregatesFilter<"finalis2022"> | number
  }

  export type metanoiaWhereInput = {
    AND?: metanoiaWhereInput | metanoiaWhereInput[]
    OR?: metanoiaWhereInput[]
    NOT?: metanoiaWhereInput | metanoiaWhereInput[]
    Name?: StringFilter<"metanoia"> | string
    Email?: StringFilter<"metanoia"> | string
    PhoneNumber?: StringFilter<"metanoia"> | string
    TransactionProof?: StringFilter<"metanoia"> | string
    Origin?: StringFilter<"metanoia"> | string
    TransactionDate?: StringFilter<"metanoia"> | string
  }

  export type metanoiaOrderByWithRelationInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
  }

  export type metanoiaWhereUniqueInput = Prisma.AtLeast<{
    Email?: string
    AND?: metanoiaWhereInput | metanoiaWhereInput[]
    OR?: metanoiaWhereInput[]
    NOT?: metanoiaWhereInput | metanoiaWhereInput[]
    Name?: StringFilter<"metanoia"> | string
    PhoneNumber?: StringFilter<"metanoia"> | string
    TransactionProof?: StringFilter<"metanoia"> | string
    Origin?: StringFilter<"metanoia"> | string
    TransactionDate?: StringFilter<"metanoia"> | string
  }, "Email">

  export type metanoiaOrderByWithAggregationInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
    _count?: metanoiaCountOrderByAggregateInput
    _max?: metanoiaMaxOrderByAggregateInput
    _min?: metanoiaMinOrderByAggregateInput
  }

  export type metanoiaScalarWhereWithAggregatesInput = {
    AND?: metanoiaScalarWhereWithAggregatesInput | metanoiaScalarWhereWithAggregatesInput[]
    OR?: metanoiaScalarWhereWithAggregatesInput[]
    NOT?: metanoiaScalarWhereWithAggregatesInput | metanoiaScalarWhereWithAggregatesInput[]
    Name?: StringWithAggregatesFilter<"metanoia"> | string
    Email?: StringWithAggregatesFilter<"metanoia"> | string
    PhoneNumber?: StringWithAggregatesFilter<"metanoia"> | string
    TransactionProof?: StringWithAggregatesFilter<"metanoia"> | string
    Origin?: StringWithAggregatesFilter<"metanoia"> | string
    TransactionDate?: StringWithAggregatesFilter<"metanoia"> | string
  }

  export type pesertaWhereInput = {
    AND?: pesertaWhereInput | pesertaWhereInput[]
    OR?: pesertaWhereInput[]
    NOT?: pesertaWhereInput | pesertaWhereInput[]
    Name?: StringFilter<"peserta"> | string
    StudentID?: StringFilter<"peserta"> | string
    Email?: StringFilter<"peserta"> | string
    gender?: StringFilter<"peserta"> | string
    BirthDate?: DateTimeFilter<"peserta"> | Date | string
    BirthPlace?: StringFilter<"peserta"> | string
    Address?: StringFilter<"peserta"> | string
    PhoneNumber?: StringFilter<"peserta"> | string
    LineID?: StringFilter<"peserta"> | string
    IGUsername?: StringFilter<"peserta"> | string
    Major?: StringFilter<"peserta"> | string
    Year?: StringFilter<"peserta"> | string
    GPA?: StringFilter<"peserta"> | string
    gpaPict?: StringFilter<"peserta"> | string
    Height?: StringFilter<"peserta"> | string
    Weight?: StringFilter<"peserta"> | string
    clothesSize?: StringFilter<"peserta"> | string
    pantsSize?: StringFilter<"peserta"> | string
    shoeSize?: IntFilter<"peserta"> | number
    AboutMe?: StringFilter<"peserta"> | string
    Motivation?: StringFilter<"peserta"> | string
    Talents?: StringFilter<"peserta"> | string
    OrganizationExperience?: StringFilter<"peserta"> | string
    Achievements?: StringFilter<"peserta"> | string
    RoleModelCharacter?: StringFilter<"peserta"> | string
    picture?: StringFilter<"peserta"> | string
    personality?: StringFilter<"peserta"> | string
    essai?: StringFilter<"peserta"> | string
    Status?: IntFilter<"peserta"> | number
    QuestionType?: StringFilter<"peserta"> | string
  }

  export type pesertaOrderByWithRelationInput = {
    Name?: SortOrder
    StudentID?: SortOrder
    Email?: SortOrder
    gender?: SortOrder
    BirthDate?: SortOrder
    BirthPlace?: SortOrder
    Address?: SortOrder
    PhoneNumber?: SortOrder
    LineID?: SortOrder
    IGUsername?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    GPA?: SortOrder
    gpaPict?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    clothesSize?: SortOrder
    pantsSize?: SortOrder
    shoeSize?: SortOrder
    AboutMe?: SortOrder
    Motivation?: SortOrder
    Talents?: SortOrder
    OrganizationExperience?: SortOrder
    Achievements?: SortOrder
    RoleModelCharacter?: SortOrder
    picture?: SortOrder
    personality?: SortOrder
    essai?: SortOrder
    Status?: SortOrder
    QuestionType?: SortOrder
  }

  export type pesertaWhereUniqueInput = Prisma.AtLeast<{
    StudentID?: string
    AND?: pesertaWhereInput | pesertaWhereInput[]
    OR?: pesertaWhereInput[]
    NOT?: pesertaWhereInput | pesertaWhereInput[]
    Name?: StringFilter<"peserta"> | string
    Email?: StringFilter<"peserta"> | string
    gender?: StringFilter<"peserta"> | string
    BirthDate?: DateTimeFilter<"peserta"> | Date | string
    BirthPlace?: StringFilter<"peserta"> | string
    Address?: StringFilter<"peserta"> | string
    PhoneNumber?: StringFilter<"peserta"> | string
    LineID?: StringFilter<"peserta"> | string
    IGUsername?: StringFilter<"peserta"> | string
    Major?: StringFilter<"peserta"> | string
    Year?: StringFilter<"peserta"> | string
    GPA?: StringFilter<"peserta"> | string
    gpaPict?: StringFilter<"peserta"> | string
    Height?: StringFilter<"peserta"> | string
    Weight?: StringFilter<"peserta"> | string
    clothesSize?: StringFilter<"peserta"> | string
    pantsSize?: StringFilter<"peserta"> | string
    shoeSize?: IntFilter<"peserta"> | number
    AboutMe?: StringFilter<"peserta"> | string
    Motivation?: StringFilter<"peserta"> | string
    Talents?: StringFilter<"peserta"> | string
    OrganizationExperience?: StringFilter<"peserta"> | string
    Achievements?: StringFilter<"peserta"> | string
    RoleModelCharacter?: StringFilter<"peserta"> | string
    picture?: StringFilter<"peserta"> | string
    personality?: StringFilter<"peserta"> | string
    essai?: StringFilter<"peserta"> | string
    Status?: IntFilter<"peserta"> | number
    QuestionType?: StringFilter<"peserta"> | string
  }, "StudentID">

  export type pesertaOrderByWithAggregationInput = {
    Name?: SortOrder
    StudentID?: SortOrder
    Email?: SortOrder
    gender?: SortOrder
    BirthDate?: SortOrder
    BirthPlace?: SortOrder
    Address?: SortOrder
    PhoneNumber?: SortOrder
    LineID?: SortOrder
    IGUsername?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    GPA?: SortOrder
    gpaPict?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    clothesSize?: SortOrder
    pantsSize?: SortOrder
    shoeSize?: SortOrder
    AboutMe?: SortOrder
    Motivation?: SortOrder
    Talents?: SortOrder
    OrganizationExperience?: SortOrder
    Achievements?: SortOrder
    RoleModelCharacter?: SortOrder
    picture?: SortOrder
    personality?: SortOrder
    essai?: SortOrder
    Status?: SortOrder
    QuestionType?: SortOrder
    _count?: pesertaCountOrderByAggregateInput
    _avg?: pesertaAvgOrderByAggregateInput
    _max?: pesertaMaxOrderByAggregateInput
    _min?: pesertaMinOrderByAggregateInput
    _sum?: pesertaSumOrderByAggregateInput
  }

  export type pesertaScalarWhereWithAggregatesInput = {
    AND?: pesertaScalarWhereWithAggregatesInput | pesertaScalarWhereWithAggregatesInput[]
    OR?: pesertaScalarWhereWithAggregatesInput[]
    NOT?: pesertaScalarWhereWithAggregatesInput | pesertaScalarWhereWithAggregatesInput[]
    Name?: StringWithAggregatesFilter<"peserta"> | string
    StudentID?: StringWithAggregatesFilter<"peserta"> | string
    Email?: StringWithAggregatesFilter<"peserta"> | string
    gender?: StringWithAggregatesFilter<"peserta"> | string
    BirthDate?: DateTimeWithAggregatesFilter<"peserta"> | Date | string
    BirthPlace?: StringWithAggregatesFilter<"peserta"> | string
    Address?: StringWithAggregatesFilter<"peserta"> | string
    PhoneNumber?: StringWithAggregatesFilter<"peserta"> | string
    LineID?: StringWithAggregatesFilter<"peserta"> | string
    IGUsername?: StringWithAggregatesFilter<"peserta"> | string
    Major?: StringWithAggregatesFilter<"peserta"> | string
    Year?: StringWithAggregatesFilter<"peserta"> | string
    GPA?: StringWithAggregatesFilter<"peserta"> | string
    gpaPict?: StringWithAggregatesFilter<"peserta"> | string
    Height?: StringWithAggregatesFilter<"peserta"> | string
    Weight?: StringWithAggregatesFilter<"peserta"> | string
    clothesSize?: StringWithAggregatesFilter<"peserta"> | string
    pantsSize?: StringWithAggregatesFilter<"peserta"> | string
    shoeSize?: IntWithAggregatesFilter<"peserta"> | number
    AboutMe?: StringWithAggregatesFilter<"peserta"> | string
    Motivation?: StringWithAggregatesFilter<"peserta"> | string
    Talents?: StringWithAggregatesFilter<"peserta"> | string
    OrganizationExperience?: StringWithAggregatesFilter<"peserta"> | string
    Achievements?: StringWithAggregatesFilter<"peserta"> | string
    RoleModelCharacter?: StringWithAggregatesFilter<"peserta"> | string
    picture?: StringWithAggregatesFilter<"peserta"> | string
    personality?: StringWithAggregatesFilter<"peserta"> | string
    essai?: StringWithAggregatesFilter<"peserta"> | string
    Status?: IntWithAggregatesFilter<"peserta"> | number
    QuestionType?: StringWithAggregatesFilter<"peserta"> | string
  }

  export type peserta_2023WhereInput = {
    AND?: peserta_2023WhereInput | peserta_2023WhereInput[]
    OR?: peserta_2023WhereInput[]
    NOT?: peserta_2023WhereInput | peserta_2023WhereInput[]
    id?: IntFilter<"peserta_2023"> | number
    name?: StringFilter<"peserta_2023"> | string
    nim?: StringFilter<"peserta_2023"> | string
    email_student?: StringFilter<"peserta_2023"> | string
    birth_place?: StringFilter<"peserta_2023"> | string
    birth_date?: DateTimeFilter<"peserta_2023"> | Date | string
    gender?: StringFilter<"peserta_2023"> | string
    address?: StringFilter<"peserta_2023"> | string
    phone_number?: StringFilter<"peserta_2023"> | string
    line_id?: StringFilter<"peserta_2023"> | string
    instagram_username?: StringFilter<"peserta_2023"> | string
    tiktok_username?: StringFilter<"peserta_2023"> | string
    major?: StringFilter<"peserta_2023"> | string
    year?: StringFilter<"peserta_2023"> | string
    sub_gpa?: StringFilter<"peserta_2023"> | string
    gpa?: StringFilter<"peserta_2023"> | string
    height?: StringFilter<"peserta_2023"> | string
    weight?: StringFilter<"peserta_2023"> | string
    clothes_size?: StringFilter<"peserta_2023"> | string
    shoe_size?: IntFilter<"peserta_2023"> | number
    pants_size?: StringFilter<"peserta_2023"> | string
    about_me?: StringFilter<"peserta_2023"> | string
    motivation?: StringFilter<"peserta_2023"> | string
    personality?: StringFilter<"peserta_2023"> | string
    talents?: StringFilter<"peserta_2023"> | string
    achievements?: StringFilter<"peserta_2023"> | string
    picture?: StringFilter<"peserta_2023"> | string
    personality_screenshot?: StringFilter<"peserta_2023"> | string
    grades_screenshot?: StringFilter<"peserta_2023"> | string
    student_card_screenshot?: StringFilter<"peserta_2023"> | string
    created_at?: DateTimeFilter<"peserta_2023"> | Date | string
  }

  export type peserta_2023OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email_student?: SortOrder
    birth_place?: SortOrder
    birth_date?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    line_id?: SortOrder
    instagram_username?: SortOrder
    tiktok_username?: SortOrder
    major?: SortOrder
    year?: SortOrder
    sub_gpa?: SortOrder
    gpa?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    clothes_size?: SortOrder
    shoe_size?: SortOrder
    pants_size?: SortOrder
    about_me?: SortOrder
    motivation?: SortOrder
    personality?: SortOrder
    talents?: SortOrder
    achievements?: SortOrder
    picture?: SortOrder
    personality_screenshot?: SortOrder
    grades_screenshot?: SortOrder
    student_card_screenshot?: SortOrder
    created_at?: SortOrder
  }

  export type peserta_2023WhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: peserta_2023WhereInput | peserta_2023WhereInput[]
    OR?: peserta_2023WhereInput[]
    NOT?: peserta_2023WhereInput | peserta_2023WhereInput[]
    name?: StringFilter<"peserta_2023"> | string
    nim?: StringFilter<"peserta_2023"> | string
    email_student?: StringFilter<"peserta_2023"> | string
    birth_place?: StringFilter<"peserta_2023"> | string
    birth_date?: DateTimeFilter<"peserta_2023"> | Date | string
    gender?: StringFilter<"peserta_2023"> | string
    address?: StringFilter<"peserta_2023"> | string
    phone_number?: StringFilter<"peserta_2023"> | string
    line_id?: StringFilter<"peserta_2023"> | string
    instagram_username?: StringFilter<"peserta_2023"> | string
    tiktok_username?: StringFilter<"peserta_2023"> | string
    major?: StringFilter<"peserta_2023"> | string
    year?: StringFilter<"peserta_2023"> | string
    sub_gpa?: StringFilter<"peserta_2023"> | string
    gpa?: StringFilter<"peserta_2023"> | string
    height?: StringFilter<"peserta_2023"> | string
    weight?: StringFilter<"peserta_2023"> | string
    clothes_size?: StringFilter<"peserta_2023"> | string
    shoe_size?: IntFilter<"peserta_2023"> | number
    pants_size?: StringFilter<"peserta_2023"> | string
    about_me?: StringFilter<"peserta_2023"> | string
    motivation?: StringFilter<"peserta_2023"> | string
    personality?: StringFilter<"peserta_2023"> | string
    talents?: StringFilter<"peserta_2023"> | string
    achievements?: StringFilter<"peserta_2023"> | string
    picture?: StringFilter<"peserta_2023"> | string
    personality_screenshot?: StringFilter<"peserta_2023"> | string
    grades_screenshot?: StringFilter<"peserta_2023"> | string
    student_card_screenshot?: StringFilter<"peserta_2023"> | string
    created_at?: DateTimeFilter<"peserta_2023"> | Date | string
  }, "id">

  export type peserta_2023OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email_student?: SortOrder
    birth_place?: SortOrder
    birth_date?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    line_id?: SortOrder
    instagram_username?: SortOrder
    tiktok_username?: SortOrder
    major?: SortOrder
    year?: SortOrder
    sub_gpa?: SortOrder
    gpa?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    clothes_size?: SortOrder
    shoe_size?: SortOrder
    pants_size?: SortOrder
    about_me?: SortOrder
    motivation?: SortOrder
    personality?: SortOrder
    talents?: SortOrder
    achievements?: SortOrder
    picture?: SortOrder
    personality_screenshot?: SortOrder
    grades_screenshot?: SortOrder
    student_card_screenshot?: SortOrder
    created_at?: SortOrder
    _count?: peserta_2023CountOrderByAggregateInput
    _avg?: peserta_2023AvgOrderByAggregateInput
    _max?: peserta_2023MaxOrderByAggregateInput
    _min?: peserta_2023MinOrderByAggregateInput
    _sum?: peserta_2023SumOrderByAggregateInput
  }

  export type peserta_2023ScalarWhereWithAggregatesInput = {
    AND?: peserta_2023ScalarWhereWithAggregatesInput | peserta_2023ScalarWhereWithAggregatesInput[]
    OR?: peserta_2023ScalarWhereWithAggregatesInput[]
    NOT?: peserta_2023ScalarWhereWithAggregatesInput | peserta_2023ScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"peserta_2023"> | number
    name?: StringWithAggregatesFilter<"peserta_2023"> | string
    nim?: StringWithAggregatesFilter<"peserta_2023"> | string
    email_student?: StringWithAggregatesFilter<"peserta_2023"> | string
    birth_place?: StringWithAggregatesFilter<"peserta_2023"> | string
    birth_date?: DateTimeWithAggregatesFilter<"peserta_2023"> | Date | string
    gender?: StringWithAggregatesFilter<"peserta_2023"> | string
    address?: StringWithAggregatesFilter<"peserta_2023"> | string
    phone_number?: StringWithAggregatesFilter<"peserta_2023"> | string
    line_id?: StringWithAggregatesFilter<"peserta_2023"> | string
    instagram_username?: StringWithAggregatesFilter<"peserta_2023"> | string
    tiktok_username?: StringWithAggregatesFilter<"peserta_2023"> | string
    major?: StringWithAggregatesFilter<"peserta_2023"> | string
    year?: StringWithAggregatesFilter<"peserta_2023"> | string
    sub_gpa?: StringWithAggregatesFilter<"peserta_2023"> | string
    gpa?: StringWithAggregatesFilter<"peserta_2023"> | string
    height?: StringWithAggregatesFilter<"peserta_2023"> | string
    weight?: StringWithAggregatesFilter<"peserta_2023"> | string
    clothes_size?: StringWithAggregatesFilter<"peserta_2023"> | string
    shoe_size?: IntWithAggregatesFilter<"peserta_2023"> | number
    pants_size?: StringWithAggregatesFilter<"peserta_2023"> | string
    about_me?: StringWithAggregatesFilter<"peserta_2023"> | string
    motivation?: StringWithAggregatesFilter<"peserta_2023"> | string
    personality?: StringWithAggregatesFilter<"peserta_2023"> | string
    talents?: StringWithAggregatesFilter<"peserta_2023"> | string
    achievements?: StringWithAggregatesFilter<"peserta_2023"> | string
    picture?: StringWithAggregatesFilter<"peserta_2023"> | string
    personality_screenshot?: StringWithAggregatesFilter<"peserta_2023"> | string
    grades_screenshot?: StringWithAggregatesFilter<"peserta_2023"> | string
    student_card_screenshot?: StringWithAggregatesFilter<"peserta_2023"> | string
    created_at?: DateTimeWithAggregatesFilter<"peserta_2023"> | Date | string
  }

  export type votingWhereInput = {
    AND?: votingWhereInput | votingWhereInput[]
    OR?: votingWhereInput[]
    NOT?: votingWhereInput | votingWhereInput[]
    NIM?: StringFilter<"voting"> | string
    Voters?: IntFilter<"voting"> | number
  }

  export type votingOrderByWithRelationInput = {
    NIM?: SortOrder
    Voters?: SortOrder
  }

  export type votingWhereUniqueInput = Prisma.AtLeast<{
    NIM?: string
    AND?: votingWhereInput | votingWhereInput[]
    OR?: votingWhereInput[]
    NOT?: votingWhereInput | votingWhereInput[]
    Voters?: IntFilter<"voting"> | number
  }, "NIM">

  export type votingOrderByWithAggregationInput = {
    NIM?: SortOrder
    Voters?: SortOrder
    _count?: votingCountOrderByAggregateInput
    _avg?: votingAvgOrderByAggregateInput
    _max?: votingMaxOrderByAggregateInput
    _min?: votingMinOrderByAggregateInput
    _sum?: votingSumOrderByAggregateInput
  }

  export type votingScalarWhereWithAggregatesInput = {
    AND?: votingScalarWhereWithAggregatesInput | votingScalarWhereWithAggregatesInput[]
    OR?: votingScalarWhereWithAggregatesInput[]
    NOT?: votingScalarWhereWithAggregatesInput | votingScalarWhereWithAggregatesInput[]
    NIM?: StringWithAggregatesFilter<"voting"> | string
    Voters?: IntWithAggregatesFilter<"voting"> | number
  }

  export type sponsor_medparWhereInput = {
    AND?: sponsor_medparWhereInput | sponsor_medparWhereInput[]
    OR?: sponsor_medparWhereInput[]
    NOT?: sponsor_medparWhereInput | sponsor_medparWhereInput[]
    Sponsor_MedparID?: StringFilter<"sponsor_medpar"> | string
    type?: IntFilter<"sponsor_medpar"> | number
    src?: StringFilter<"sponsor_medpar"> | string
    nama?: StringNullableFilter<"sponsor_medpar"> | string | null
    url?: StringNullableFilter<"sponsor_medpar"> | string | null
    bg?: BoolFilter<"sponsor_medpar"> | boolean
  }

  export type sponsor_medparOrderByWithRelationInput = {
    Sponsor_MedparID?: SortOrder
    type?: SortOrder
    src?: SortOrder
    nama?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    bg?: SortOrder
  }

  export type sponsor_medparWhereUniqueInput = Prisma.AtLeast<{
    Sponsor_MedparID?: string
    AND?: sponsor_medparWhereInput | sponsor_medparWhereInput[]
    OR?: sponsor_medparWhereInput[]
    NOT?: sponsor_medparWhereInput | sponsor_medparWhereInput[]
    type?: IntFilter<"sponsor_medpar"> | number
    src?: StringFilter<"sponsor_medpar"> | string
    nama?: StringNullableFilter<"sponsor_medpar"> | string | null
    url?: StringNullableFilter<"sponsor_medpar"> | string | null
    bg?: BoolFilter<"sponsor_medpar"> | boolean
  }, "Sponsor_MedparID">

  export type sponsor_medparOrderByWithAggregationInput = {
    Sponsor_MedparID?: SortOrder
    type?: SortOrder
    src?: SortOrder
    nama?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    bg?: SortOrder
    _count?: sponsor_medparCountOrderByAggregateInput
    _avg?: sponsor_medparAvgOrderByAggregateInput
    _max?: sponsor_medparMaxOrderByAggregateInput
    _min?: sponsor_medparMinOrderByAggregateInput
    _sum?: sponsor_medparSumOrderByAggregateInput
  }

  export type sponsor_medparScalarWhereWithAggregatesInput = {
    AND?: sponsor_medparScalarWhereWithAggregatesInput | sponsor_medparScalarWhereWithAggregatesInput[]
    OR?: sponsor_medparScalarWhereWithAggregatesInput[]
    NOT?: sponsor_medparScalarWhereWithAggregatesInput | sponsor_medparScalarWhereWithAggregatesInput[]
    Sponsor_MedparID?: StringWithAggregatesFilter<"sponsor_medpar"> | string
    type?: IntWithAggregatesFilter<"sponsor_medpar"> | number
    src?: StringWithAggregatesFilter<"sponsor_medpar"> | string
    nama?: StringNullableWithAggregatesFilter<"sponsor_medpar"> | string | null
    url?: StringNullableWithAggregatesFilter<"sponsor_medpar"> | string | null
    bg?: BoolWithAggregatesFilter<"sponsor_medpar"> | boolean
  }

  export type userCreateInput = {
    id?: string
    username?: string | null
    email?: string | null
    password: string
  }

  export type userUncheckedCreateInput = {
    id?: string
    username?: string | null
    email?: string | null
    password: string
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateManyInput = {
    id?: string
    username?: string | null
    email?: string | null
    password: string
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
  }

  export type awardingCreateInput = {
    Name: string
    Email: string
    PhoneNumber: string
    TransactionProof: string
    Origin: string
    TransactionDate: string
  }

  export type awardingUncheckedCreateInput = {
    Name: string
    Email: string
    PhoneNumber: string
    TransactionProof: string
    Origin: string
    TransactionDate: string
  }

  export type awardingUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    TransactionProof?: StringFieldUpdateOperationsInput | string
    Origin?: StringFieldUpdateOperationsInput | string
    TransactionDate?: StringFieldUpdateOperationsInput | string
  }

  export type awardingUncheckedUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    TransactionProof?: StringFieldUpdateOperationsInput | string
    Origin?: StringFieldUpdateOperationsInput | string
    TransactionDate?: StringFieldUpdateOperationsInput | string
  }

  export type awardingCreateManyInput = {
    Name: string
    Email: string
    PhoneNumber: string
    TransactionProof: string
    Origin: string
    TransactionDate: string
  }

  export type awardingUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    TransactionProof?: StringFieldUpdateOperationsInput | string
    Origin?: StringFieldUpdateOperationsInput | string
    TransactionDate?: StringFieldUpdateOperationsInput | string
  }

  export type awardingUncheckedUpdateManyInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    TransactionProof?: StringFieldUpdateOperationsInput | string
    Origin?: StringFieldUpdateOperationsInput | string
    TransactionDate?: StringFieldUpdateOperationsInput | string
  }

  export type ci_sessionsCreateInput = {
    id: string
    ip_address: string
    timestamp?: number
    data: Buffer
  }

  export type ci_sessionsUncheckedCreateInput = {
    id: string
    ip_address: string
    timestamp?: number
    data: Buffer
  }

  export type ci_sessionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    data?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type ci_sessionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    data?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type ci_sessionsCreateManyInput = {
    id: string
    ip_address: string
    timestamp?: number
    data: Buffer
  }

  export type ci_sessionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    data?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type ci_sessionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip_address?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    data?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type finalis2022CreateInput = {
    Name: string
    Major: string
    Year: number
    Tagline: string
    Photo: string
    id: number
  }

  export type finalis2022UncheckedCreateInput = {
    Name: string
    Major: string
    Year: number
    Tagline: string
    Photo: string
    id: number
  }

  export type finalis2022UpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Major?: StringFieldUpdateOperationsInput | string
    Year?: IntFieldUpdateOperationsInput | number
    Tagline?: StringFieldUpdateOperationsInput | string
    Photo?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type finalis2022UncheckedUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Major?: StringFieldUpdateOperationsInput | string
    Year?: IntFieldUpdateOperationsInput | number
    Tagline?: StringFieldUpdateOperationsInput | string
    Photo?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type finalis2022CreateManyInput = {
    Name: string
    Major: string
    Year: number
    Tagline: string
    Photo: string
    id: number
  }

  export type finalis2022UpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Major?: StringFieldUpdateOperationsInput | string
    Year?: IntFieldUpdateOperationsInput | number
    Tagline?: StringFieldUpdateOperationsInput | string
    Photo?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type finalis2022UncheckedUpdateManyInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Major?: StringFieldUpdateOperationsInput | string
    Year?: IntFieldUpdateOperationsInput | number
    Tagline?: StringFieldUpdateOperationsInput | string
    Photo?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type metanoiaCreateInput = {
    Name: string
    Email: string
    PhoneNumber: string
    TransactionProof: string
    Origin: string
    TransactionDate: string
  }

  export type metanoiaUncheckedCreateInput = {
    Name: string
    Email: string
    PhoneNumber: string
    TransactionProof: string
    Origin: string
    TransactionDate: string
  }

  export type metanoiaUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    TransactionProof?: StringFieldUpdateOperationsInput | string
    Origin?: StringFieldUpdateOperationsInput | string
    TransactionDate?: StringFieldUpdateOperationsInput | string
  }

  export type metanoiaUncheckedUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    TransactionProof?: StringFieldUpdateOperationsInput | string
    Origin?: StringFieldUpdateOperationsInput | string
    TransactionDate?: StringFieldUpdateOperationsInput | string
  }

  export type metanoiaCreateManyInput = {
    Name: string
    Email: string
    PhoneNumber: string
    TransactionProof: string
    Origin: string
    TransactionDate: string
  }

  export type metanoiaUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    TransactionProof?: StringFieldUpdateOperationsInput | string
    Origin?: StringFieldUpdateOperationsInput | string
    TransactionDate?: StringFieldUpdateOperationsInput | string
  }

  export type metanoiaUncheckedUpdateManyInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    TransactionProof?: StringFieldUpdateOperationsInput | string
    Origin?: StringFieldUpdateOperationsInput | string
    TransactionDate?: StringFieldUpdateOperationsInput | string
  }

  export type pesertaCreateInput = {
    Name: string
    StudentID: string
    Email: string
    gender: string
    BirthDate: Date | string
    BirthPlace: string
    Address: string
    PhoneNumber: string
    LineID: string
    IGUsername: string
    Major: string
    Year: string
    GPA: string
    gpaPict: string
    Height: string
    Weight: string
    clothesSize: string
    pantsSize: string
    shoeSize: number
    AboutMe: string
    Motivation: string
    Talents: string
    OrganizationExperience: string
    Achievements: string
    RoleModelCharacter: string
    picture: string
    personality: string
    essai: string
    Status: number
    QuestionType: string
  }

  export type pesertaUncheckedCreateInput = {
    Name: string
    StudentID: string
    Email: string
    gender: string
    BirthDate: Date | string
    BirthPlace: string
    Address: string
    PhoneNumber: string
    LineID: string
    IGUsername: string
    Major: string
    Year: string
    GPA: string
    gpaPict: string
    Height: string
    Weight: string
    clothesSize: string
    pantsSize: string
    shoeSize: number
    AboutMe: string
    Motivation: string
    Talents: string
    OrganizationExperience: string
    Achievements: string
    RoleModelCharacter: string
    picture: string
    personality: string
    essai: string
    Status: number
    QuestionType: string
  }

  export type pesertaUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    StudentID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    BirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    BirthPlace?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    LineID?: StringFieldUpdateOperationsInput | string
    IGUsername?: StringFieldUpdateOperationsInput | string
    Major?: StringFieldUpdateOperationsInput | string
    Year?: StringFieldUpdateOperationsInput | string
    GPA?: StringFieldUpdateOperationsInput | string
    gpaPict?: StringFieldUpdateOperationsInput | string
    Height?: StringFieldUpdateOperationsInput | string
    Weight?: StringFieldUpdateOperationsInput | string
    clothesSize?: StringFieldUpdateOperationsInput | string
    pantsSize?: StringFieldUpdateOperationsInput | string
    shoeSize?: IntFieldUpdateOperationsInput | number
    AboutMe?: StringFieldUpdateOperationsInput | string
    Motivation?: StringFieldUpdateOperationsInput | string
    Talents?: StringFieldUpdateOperationsInput | string
    OrganizationExperience?: StringFieldUpdateOperationsInput | string
    Achievements?: StringFieldUpdateOperationsInput | string
    RoleModelCharacter?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    personality?: StringFieldUpdateOperationsInput | string
    essai?: StringFieldUpdateOperationsInput | string
    Status?: IntFieldUpdateOperationsInput | number
    QuestionType?: StringFieldUpdateOperationsInput | string
  }

  export type pesertaUncheckedUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    StudentID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    BirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    BirthPlace?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    LineID?: StringFieldUpdateOperationsInput | string
    IGUsername?: StringFieldUpdateOperationsInput | string
    Major?: StringFieldUpdateOperationsInput | string
    Year?: StringFieldUpdateOperationsInput | string
    GPA?: StringFieldUpdateOperationsInput | string
    gpaPict?: StringFieldUpdateOperationsInput | string
    Height?: StringFieldUpdateOperationsInput | string
    Weight?: StringFieldUpdateOperationsInput | string
    clothesSize?: StringFieldUpdateOperationsInput | string
    pantsSize?: StringFieldUpdateOperationsInput | string
    shoeSize?: IntFieldUpdateOperationsInput | number
    AboutMe?: StringFieldUpdateOperationsInput | string
    Motivation?: StringFieldUpdateOperationsInput | string
    Talents?: StringFieldUpdateOperationsInput | string
    OrganizationExperience?: StringFieldUpdateOperationsInput | string
    Achievements?: StringFieldUpdateOperationsInput | string
    RoleModelCharacter?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    personality?: StringFieldUpdateOperationsInput | string
    essai?: StringFieldUpdateOperationsInput | string
    Status?: IntFieldUpdateOperationsInput | number
    QuestionType?: StringFieldUpdateOperationsInput | string
  }

  export type pesertaCreateManyInput = {
    Name: string
    StudentID: string
    Email: string
    gender: string
    BirthDate: Date | string
    BirthPlace: string
    Address: string
    PhoneNumber: string
    LineID: string
    IGUsername: string
    Major: string
    Year: string
    GPA: string
    gpaPict: string
    Height: string
    Weight: string
    clothesSize: string
    pantsSize: string
    shoeSize: number
    AboutMe: string
    Motivation: string
    Talents: string
    OrganizationExperience: string
    Achievements: string
    RoleModelCharacter: string
    picture: string
    personality: string
    essai: string
    Status: number
    QuestionType: string
  }

  export type pesertaUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    StudentID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    BirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    BirthPlace?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    LineID?: StringFieldUpdateOperationsInput | string
    IGUsername?: StringFieldUpdateOperationsInput | string
    Major?: StringFieldUpdateOperationsInput | string
    Year?: StringFieldUpdateOperationsInput | string
    GPA?: StringFieldUpdateOperationsInput | string
    gpaPict?: StringFieldUpdateOperationsInput | string
    Height?: StringFieldUpdateOperationsInput | string
    Weight?: StringFieldUpdateOperationsInput | string
    clothesSize?: StringFieldUpdateOperationsInput | string
    pantsSize?: StringFieldUpdateOperationsInput | string
    shoeSize?: IntFieldUpdateOperationsInput | number
    AboutMe?: StringFieldUpdateOperationsInput | string
    Motivation?: StringFieldUpdateOperationsInput | string
    Talents?: StringFieldUpdateOperationsInput | string
    OrganizationExperience?: StringFieldUpdateOperationsInput | string
    Achievements?: StringFieldUpdateOperationsInput | string
    RoleModelCharacter?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    personality?: StringFieldUpdateOperationsInput | string
    essai?: StringFieldUpdateOperationsInput | string
    Status?: IntFieldUpdateOperationsInput | number
    QuestionType?: StringFieldUpdateOperationsInput | string
  }

  export type pesertaUncheckedUpdateManyInput = {
    Name?: StringFieldUpdateOperationsInput | string
    StudentID?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    BirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    BirthPlace?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: StringFieldUpdateOperationsInput | string
    LineID?: StringFieldUpdateOperationsInput | string
    IGUsername?: StringFieldUpdateOperationsInput | string
    Major?: StringFieldUpdateOperationsInput | string
    Year?: StringFieldUpdateOperationsInput | string
    GPA?: StringFieldUpdateOperationsInput | string
    gpaPict?: StringFieldUpdateOperationsInput | string
    Height?: StringFieldUpdateOperationsInput | string
    Weight?: StringFieldUpdateOperationsInput | string
    clothesSize?: StringFieldUpdateOperationsInput | string
    pantsSize?: StringFieldUpdateOperationsInput | string
    shoeSize?: IntFieldUpdateOperationsInput | number
    AboutMe?: StringFieldUpdateOperationsInput | string
    Motivation?: StringFieldUpdateOperationsInput | string
    Talents?: StringFieldUpdateOperationsInput | string
    OrganizationExperience?: StringFieldUpdateOperationsInput | string
    Achievements?: StringFieldUpdateOperationsInput | string
    RoleModelCharacter?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    personality?: StringFieldUpdateOperationsInput | string
    essai?: StringFieldUpdateOperationsInput | string
    Status?: IntFieldUpdateOperationsInput | number
    QuestionType?: StringFieldUpdateOperationsInput | string
  }

  export type peserta_2023CreateInput = {
    name: string
    nim: string
    email_student: string
    birth_place: string
    birth_date: Date | string
    gender: string
    address: string
    phone_number: string
    line_id: string
    instagram_username: string
    tiktok_username: string
    major: string
    year: string
    sub_gpa: string
    gpa: string
    height: string
    weight: string
    clothes_size: string
    shoe_size: number
    pants_size: string
    about_me: string
    motivation: string
    personality: string
    talents: string
    achievements: string
    picture: string
    personality_screenshot: string
    grades_screenshot: string
    student_card_screenshot: string
    created_at?: Date | string
  }

  export type peserta_2023UncheckedCreateInput = {
    id?: number
    name: string
    nim: string
    email_student: string
    birth_place: string
    birth_date: Date | string
    gender: string
    address: string
    phone_number: string
    line_id: string
    instagram_username: string
    tiktok_username: string
    major: string
    year: string
    sub_gpa: string
    gpa: string
    height: string
    weight: string
    clothes_size: string
    shoe_size: number
    pants_size: string
    about_me: string
    motivation: string
    personality: string
    talents: string
    achievements: string
    picture: string
    personality_screenshot: string
    grades_screenshot: string
    student_card_screenshot: string
    created_at?: Date | string
  }

  export type peserta_2023UpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_student?: StringFieldUpdateOperationsInput | string
    birth_place?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    line_id?: StringFieldUpdateOperationsInput | string
    instagram_username?: StringFieldUpdateOperationsInput | string
    tiktok_username?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    sub_gpa?: StringFieldUpdateOperationsInput | string
    gpa?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    clothes_size?: StringFieldUpdateOperationsInput | string
    shoe_size?: IntFieldUpdateOperationsInput | number
    pants_size?: StringFieldUpdateOperationsInput | string
    about_me?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    personality?: StringFieldUpdateOperationsInput | string
    talents?: StringFieldUpdateOperationsInput | string
    achievements?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    personality_screenshot?: StringFieldUpdateOperationsInput | string
    grades_screenshot?: StringFieldUpdateOperationsInput | string
    student_card_screenshot?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type peserta_2023UncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_student?: StringFieldUpdateOperationsInput | string
    birth_place?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    line_id?: StringFieldUpdateOperationsInput | string
    instagram_username?: StringFieldUpdateOperationsInput | string
    tiktok_username?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    sub_gpa?: StringFieldUpdateOperationsInput | string
    gpa?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    clothes_size?: StringFieldUpdateOperationsInput | string
    shoe_size?: IntFieldUpdateOperationsInput | number
    pants_size?: StringFieldUpdateOperationsInput | string
    about_me?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    personality?: StringFieldUpdateOperationsInput | string
    talents?: StringFieldUpdateOperationsInput | string
    achievements?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    personality_screenshot?: StringFieldUpdateOperationsInput | string
    grades_screenshot?: StringFieldUpdateOperationsInput | string
    student_card_screenshot?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type peserta_2023CreateManyInput = {
    id?: number
    name: string
    nim: string
    email_student: string
    birth_place: string
    birth_date: Date | string
    gender: string
    address: string
    phone_number: string
    line_id: string
    instagram_username: string
    tiktok_username: string
    major: string
    year: string
    sub_gpa: string
    gpa: string
    height: string
    weight: string
    clothes_size: string
    shoe_size: number
    pants_size: string
    about_me: string
    motivation: string
    personality: string
    talents: string
    achievements: string
    picture: string
    personality_screenshot: string
    grades_screenshot: string
    student_card_screenshot: string
    created_at?: Date | string
  }

  export type peserta_2023UpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_student?: StringFieldUpdateOperationsInput | string
    birth_place?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    line_id?: StringFieldUpdateOperationsInput | string
    instagram_username?: StringFieldUpdateOperationsInput | string
    tiktok_username?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    sub_gpa?: StringFieldUpdateOperationsInput | string
    gpa?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    clothes_size?: StringFieldUpdateOperationsInput | string
    shoe_size?: IntFieldUpdateOperationsInput | number
    pants_size?: StringFieldUpdateOperationsInput | string
    about_me?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    personality?: StringFieldUpdateOperationsInput | string
    talents?: StringFieldUpdateOperationsInput | string
    achievements?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    personality_screenshot?: StringFieldUpdateOperationsInput | string
    grades_screenshot?: StringFieldUpdateOperationsInput | string
    student_card_screenshot?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type peserta_2023UncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email_student?: StringFieldUpdateOperationsInput | string
    birth_place?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    line_id?: StringFieldUpdateOperationsInput | string
    instagram_username?: StringFieldUpdateOperationsInput | string
    tiktok_username?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    sub_gpa?: StringFieldUpdateOperationsInput | string
    gpa?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    clothes_size?: StringFieldUpdateOperationsInput | string
    shoe_size?: IntFieldUpdateOperationsInput | number
    pants_size?: StringFieldUpdateOperationsInput | string
    about_me?: StringFieldUpdateOperationsInput | string
    motivation?: StringFieldUpdateOperationsInput | string
    personality?: StringFieldUpdateOperationsInput | string
    talents?: StringFieldUpdateOperationsInput | string
    achievements?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    personality_screenshot?: StringFieldUpdateOperationsInput | string
    grades_screenshot?: StringFieldUpdateOperationsInput | string
    student_card_screenshot?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type votingCreateInput = {
    NIM: string
    Voters: number
  }

  export type votingUncheckedCreateInput = {
    NIM: string
    Voters: number
  }

  export type votingUpdateInput = {
    NIM?: StringFieldUpdateOperationsInput | string
    Voters?: IntFieldUpdateOperationsInput | number
  }

  export type votingUncheckedUpdateInput = {
    NIM?: StringFieldUpdateOperationsInput | string
    Voters?: IntFieldUpdateOperationsInput | number
  }

  export type votingCreateManyInput = {
    NIM: string
    Voters: number
  }

  export type votingUpdateManyMutationInput = {
    NIM?: StringFieldUpdateOperationsInput | string
    Voters?: IntFieldUpdateOperationsInput | number
  }

  export type votingUncheckedUpdateManyInput = {
    NIM?: StringFieldUpdateOperationsInput | string
    Voters?: IntFieldUpdateOperationsInput | number
  }

  export type sponsor_medparCreateInput = {
    Sponsor_MedparID?: string
    type: number
    src: string
    nama?: string | null
    url?: string | null
    bg?: boolean
  }

  export type sponsor_medparUncheckedCreateInput = {
    Sponsor_MedparID?: string
    type: number
    src: string
    nama?: string | null
    url?: string | null
    bg?: boolean
  }

  export type sponsor_medparUpdateInput = {
    Sponsor_MedparID?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    src?: StringFieldUpdateOperationsInput | string
    nama?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    bg?: BoolFieldUpdateOperationsInput | boolean
  }

  export type sponsor_medparUncheckedUpdateInput = {
    Sponsor_MedparID?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    src?: StringFieldUpdateOperationsInput | string
    nama?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    bg?: BoolFieldUpdateOperationsInput | boolean
  }

  export type sponsor_medparCreateManyInput = {
    Sponsor_MedparID?: string
    type: number
    src: string
    nama?: string | null
    url?: string | null
    bg?: boolean
  }

  export type sponsor_medparUpdateManyMutationInput = {
    Sponsor_MedparID?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    src?: StringFieldUpdateOperationsInput | string
    nama?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    bg?: BoolFieldUpdateOperationsInput | boolean
  }

  export type sponsor_medparUncheckedUpdateManyInput = {
    Sponsor_MedparID?: StringFieldUpdateOperationsInput | string
    type?: IntFieldUpdateOperationsInput | number
    src?: StringFieldUpdateOperationsInput | string
    nama?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    bg?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type awardingCountOrderByAggregateInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
  }

  export type awardingMaxOrderByAggregateInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
  }

  export type awardingMinOrderByAggregateInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[]
    notIn?: Buffer[]
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type ci_sessionsCountOrderByAggregateInput = {
    id?: SortOrder
    ip_address?: SortOrder
    timestamp?: SortOrder
    data?: SortOrder
  }

  export type ci_sessionsAvgOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type ci_sessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    ip_address?: SortOrder
    timestamp?: SortOrder
    data?: SortOrder
  }

  export type ci_sessionsMinOrderByAggregateInput = {
    id?: SortOrder
    ip_address?: SortOrder
    timestamp?: SortOrder
    data?: SortOrder
  }

  export type ci_sessionsSumOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[]
    notIn?: Buffer[]
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type finalis2022CountOrderByAggregateInput = {
    Name?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    Tagline?: SortOrder
    Photo?: SortOrder
    id?: SortOrder
  }

  export type finalis2022AvgOrderByAggregateInput = {
    Year?: SortOrder
    id?: SortOrder
  }

  export type finalis2022MaxOrderByAggregateInput = {
    Name?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    Tagline?: SortOrder
    Photo?: SortOrder
    id?: SortOrder
  }

  export type finalis2022MinOrderByAggregateInput = {
    Name?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    Tagline?: SortOrder
    Photo?: SortOrder
    id?: SortOrder
  }

  export type finalis2022SumOrderByAggregateInput = {
    Year?: SortOrder
    id?: SortOrder
  }

  export type metanoiaCountOrderByAggregateInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
  }

  export type metanoiaMaxOrderByAggregateInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
  }

  export type metanoiaMinOrderByAggregateInput = {
    Name?: SortOrder
    Email?: SortOrder
    PhoneNumber?: SortOrder
    TransactionProof?: SortOrder
    Origin?: SortOrder
    TransactionDate?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type pesertaCountOrderByAggregateInput = {
    Name?: SortOrder
    StudentID?: SortOrder
    Email?: SortOrder
    gender?: SortOrder
    BirthDate?: SortOrder
    BirthPlace?: SortOrder
    Address?: SortOrder
    PhoneNumber?: SortOrder
    LineID?: SortOrder
    IGUsername?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    GPA?: SortOrder
    gpaPict?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    clothesSize?: SortOrder
    pantsSize?: SortOrder
    shoeSize?: SortOrder
    AboutMe?: SortOrder
    Motivation?: SortOrder
    Talents?: SortOrder
    OrganizationExperience?: SortOrder
    Achievements?: SortOrder
    RoleModelCharacter?: SortOrder
    picture?: SortOrder
    personality?: SortOrder
    essai?: SortOrder
    Status?: SortOrder
    QuestionType?: SortOrder
  }

  export type pesertaAvgOrderByAggregateInput = {
    shoeSize?: SortOrder
    Status?: SortOrder
  }

  export type pesertaMaxOrderByAggregateInput = {
    Name?: SortOrder
    StudentID?: SortOrder
    Email?: SortOrder
    gender?: SortOrder
    BirthDate?: SortOrder
    BirthPlace?: SortOrder
    Address?: SortOrder
    PhoneNumber?: SortOrder
    LineID?: SortOrder
    IGUsername?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    GPA?: SortOrder
    gpaPict?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    clothesSize?: SortOrder
    pantsSize?: SortOrder
    shoeSize?: SortOrder
    AboutMe?: SortOrder
    Motivation?: SortOrder
    Talents?: SortOrder
    OrganizationExperience?: SortOrder
    Achievements?: SortOrder
    RoleModelCharacter?: SortOrder
    picture?: SortOrder
    personality?: SortOrder
    essai?: SortOrder
    Status?: SortOrder
    QuestionType?: SortOrder
  }

  export type pesertaMinOrderByAggregateInput = {
    Name?: SortOrder
    StudentID?: SortOrder
    Email?: SortOrder
    gender?: SortOrder
    BirthDate?: SortOrder
    BirthPlace?: SortOrder
    Address?: SortOrder
    PhoneNumber?: SortOrder
    LineID?: SortOrder
    IGUsername?: SortOrder
    Major?: SortOrder
    Year?: SortOrder
    GPA?: SortOrder
    gpaPict?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    clothesSize?: SortOrder
    pantsSize?: SortOrder
    shoeSize?: SortOrder
    AboutMe?: SortOrder
    Motivation?: SortOrder
    Talents?: SortOrder
    OrganizationExperience?: SortOrder
    Achievements?: SortOrder
    RoleModelCharacter?: SortOrder
    picture?: SortOrder
    personality?: SortOrder
    essai?: SortOrder
    Status?: SortOrder
    QuestionType?: SortOrder
  }

  export type pesertaSumOrderByAggregateInput = {
    shoeSize?: SortOrder
    Status?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type peserta_2023CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email_student?: SortOrder
    birth_place?: SortOrder
    birth_date?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    line_id?: SortOrder
    instagram_username?: SortOrder
    tiktok_username?: SortOrder
    major?: SortOrder
    year?: SortOrder
    sub_gpa?: SortOrder
    gpa?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    clothes_size?: SortOrder
    shoe_size?: SortOrder
    pants_size?: SortOrder
    about_me?: SortOrder
    motivation?: SortOrder
    personality?: SortOrder
    talents?: SortOrder
    achievements?: SortOrder
    picture?: SortOrder
    personality_screenshot?: SortOrder
    grades_screenshot?: SortOrder
    student_card_screenshot?: SortOrder
    created_at?: SortOrder
  }

  export type peserta_2023AvgOrderByAggregateInput = {
    id?: SortOrder
    shoe_size?: SortOrder
  }

  export type peserta_2023MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email_student?: SortOrder
    birth_place?: SortOrder
    birth_date?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    line_id?: SortOrder
    instagram_username?: SortOrder
    tiktok_username?: SortOrder
    major?: SortOrder
    year?: SortOrder
    sub_gpa?: SortOrder
    gpa?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    clothes_size?: SortOrder
    shoe_size?: SortOrder
    pants_size?: SortOrder
    about_me?: SortOrder
    motivation?: SortOrder
    personality?: SortOrder
    talents?: SortOrder
    achievements?: SortOrder
    picture?: SortOrder
    personality_screenshot?: SortOrder
    grades_screenshot?: SortOrder
    student_card_screenshot?: SortOrder
    created_at?: SortOrder
  }

  export type peserta_2023MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nim?: SortOrder
    email_student?: SortOrder
    birth_place?: SortOrder
    birth_date?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    line_id?: SortOrder
    instagram_username?: SortOrder
    tiktok_username?: SortOrder
    major?: SortOrder
    year?: SortOrder
    sub_gpa?: SortOrder
    gpa?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    clothes_size?: SortOrder
    shoe_size?: SortOrder
    pants_size?: SortOrder
    about_me?: SortOrder
    motivation?: SortOrder
    personality?: SortOrder
    talents?: SortOrder
    achievements?: SortOrder
    picture?: SortOrder
    personality_screenshot?: SortOrder
    grades_screenshot?: SortOrder
    student_card_screenshot?: SortOrder
    created_at?: SortOrder
  }

  export type peserta_2023SumOrderByAggregateInput = {
    id?: SortOrder
    shoe_size?: SortOrder
  }

  export type votingCountOrderByAggregateInput = {
    NIM?: SortOrder
    Voters?: SortOrder
  }

  export type votingAvgOrderByAggregateInput = {
    Voters?: SortOrder
  }

  export type votingMaxOrderByAggregateInput = {
    NIM?: SortOrder
    Voters?: SortOrder
  }

  export type votingMinOrderByAggregateInput = {
    NIM?: SortOrder
    Voters?: SortOrder
  }

  export type votingSumOrderByAggregateInput = {
    Voters?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type sponsor_medparCountOrderByAggregateInput = {
    Sponsor_MedparID?: SortOrder
    type?: SortOrder
    src?: SortOrder
    nama?: SortOrder
    url?: SortOrder
    bg?: SortOrder
  }

  export type sponsor_medparAvgOrderByAggregateInput = {
    type?: SortOrder
  }

  export type sponsor_medparMaxOrderByAggregateInput = {
    Sponsor_MedparID?: SortOrder
    type?: SortOrder
    src?: SortOrder
    nama?: SortOrder
    url?: SortOrder
    bg?: SortOrder
  }

  export type sponsor_medparMinOrderByAggregateInput = {
    Sponsor_MedparID?: SortOrder
    type?: SortOrder
    src?: SortOrder
    nama?: SortOrder
    url?: SortOrder
    bg?: SortOrder
  }

  export type sponsor_medparSumOrderByAggregateInput = {
    type?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[]
    notIn?: Buffer[]
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[]
    notIn?: Buffer[]
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use awardingDefaultArgs instead
     */
    export type awardingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = awardingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ci_sessionsDefaultArgs instead
     */
    export type ci_sessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ci_sessionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use finalis2022DefaultArgs instead
     */
    export type finalis2022Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = finalis2022DefaultArgs<ExtArgs>
    /**
     * @deprecated Use metanoiaDefaultArgs instead
     */
    export type metanoiaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = metanoiaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use pesertaDefaultArgs instead
     */
    export type pesertaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = pesertaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use peserta_2023DefaultArgs instead
     */
    export type peserta_2023Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = peserta_2023DefaultArgs<ExtArgs>
    /**
     * @deprecated Use votingDefaultArgs instead
     */
    export type votingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = votingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use sponsor_medparDefaultArgs instead
     */
    export type sponsor_medparArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = sponsor_medparDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}